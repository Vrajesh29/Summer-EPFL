$version Generated by VerilatedVcd $end
$date Tue Jun 20 11:36:09 2023
 $end
$timescale   1ps $end

 $scope module TOP $end
  $var wire  1 B clock $end
  $var wire  8 T io_exp_a [7:0] $end
  $var wire  8 U io_exp_b [7:0] $end
  $var wire  5 D io_man_a_0 [4:0] $end
  $var wire  5 E io_man_a_1 [4:0] $end
  $var wire  5 F io_man_a_2 [4:0] $end
  $var wire  5 G io_man_a_3 [4:0] $end
  $var wire  5 H io_man_b_0 [4:0] $end
  $var wire  5 I io_man_b_1 [4:0] $end
  $var wire  5 J io_man_b_2 [4:0] $end
  $var wire  5 K io_man_b_3 [4:0] $end
  $var wire 14 V io_result [13:0] $end
  $var wire  1 L io_sign_a_0 $end
  $var wire  1 M io_sign_a_1 $end
  $var wire  1 N io_sign_a_2 $end
  $var wire  1 O io_sign_a_3 $end
  $var wire  1 P io_sign_b_0 $end
  $var wire  1 Q io_sign_b_1 $end
  $var wire  1 R io_sign_b_2 $end
  $var wire  1 S io_sign_b_3 $end
  $var wire  1 C reset $end
  $scope module Hbfp $end
   $var wire 14 3 acc [13:0] $end
   $var wire 14 5 acc_buf [13:0] $end
   $var wire 14 4 acc_hbfp [13:0] $end
   $var wire  8 ? actual_shift [7:0] $end
   $var wire  9 @ buf_ [8:0] $end
   $var wire  1 B clock $end
   $var wire 10 # dotProductRegs_0 [9:0] $end
   $var wire 10 $ dotProductRegs_1 [9:0] $end
   $var wire 10 % dotProductRegs_2 [9:0] $end
   $var wire 10 & dotProductRegs_3 [9:0] $end
   $var wire 10 X exp_actual [9:0] $end
   $var wire  9 W exp_output [8:0] $end
   $var wire  8 T io_exp_a [7:0] $end
   $var wire  8 U io_exp_b [7:0] $end
   $var wire  5 D io_man_a_0 [4:0] $end
   $var wire  5 E io_man_a_1 [4:0] $end
   $var wire  5 F io_man_a_2 [4:0] $end
   $var wire  5 G io_man_a_3 [4:0] $end
   $var wire  5 H io_man_b_0 [4:0] $end
   $var wire  5 I io_man_b_1 [4:0] $end
   $var wire  5 J io_man_b_2 [4:0] $end
   $var wire  5 K io_man_b_3 [4:0] $end
   $var wire 14 V io_result [13:0] $end
   $var wire  1 L io_sign_a_0 $end
   $var wire  1 M io_sign_a_1 $end
   $var wire  1 N io_sign_a_2 $end
   $var wire  1 O io_sign_a_3 $end
   $var wire  1 P io_sign_b_0 $end
   $var wire  1 Q io_sign_b_1 $end
   $var wire  1 R io_sign_b_2 $end
   $var wire  1 S io_sign_b_3 $end
   $var wire 14 A man_out_shifted [13:0] $end
   $var wire  5 6 multiplierReg [4:0] $end
   $var wire  5 8 multiplierReg_1 [4:0] $end
   $var wire  5 : multiplierReg_2 [4:0] $end
   $var wire  5 < multiplierReg_3 [4:0] $end
   $var wire  1 C reset $end
   $var wire  8 > right_shift [7:0] $end
   $var wire  1 7 signReg $end
   $var wire  1 9 signReg_1 $end
   $var wire  1 ; signReg_2 $end
   $var wire  1 = signReg_3 $end
   $var wire  1 / signs_0 $end
   $var wire  1 0 signs_1 $end
   $var wire  1 1 signs_2 $end
   $var wire  1 2 signs_3 $end
   $var wire 11 + two_complement_0 [10:0] $end
   $var wire 11 , two_complement_1 [10:0] $end
   $var wire 11 - two_complement_2 [10:0] $end
   $var wire 11 . two_complement_3 [10:0] $end
   $var wire 11 ' two_complement_buffer_0 [10:0] $end
   $var wire 11 ( two_complement_buffer_1 [10:0] $end
   $var wire 11 ) two_complement_buffer_2 [10:0] $end
   $var wire 11 * two_complement_buffer_3 [10:0] $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b0000000000 #
b0000000000 $
b0000000000 %
b0000000000 &
b00000000000 '
b00000000000 (
b00000000000 )
b00000000000 *
b00000000000 +
b00000000000 ,
b00000000000 -
b00000000000 .
0/
00
01
02
b00000000000000 3
b00000000000000 4
b00000000000000 5
b00000 6
07
b00000 8
09
b00000 :
0;
b00000 <
0=
b00000000 >
b00000000 ?
b000000000 @
b00000000000000 A
0B
1C
b00000 D
b00000 E
b00000 F
b00000 G
b00000 H
b00000 I
b00000 J
b00000 K
0L
0M
0N
0O
0P
0Q
0R
0S
b00000000 T
b00000000 U
b00000000000000 V
b000000000 W
b0000000000 X
#1
1B
#2
0B
0C
b11101 D
b10001 E
b00001 F
b00100 G
b11100 H
b01100 I
b00110 J
b00100 K
1L
1M
1N
1O
1P
1Q
1S
b01100011 T
b01000101 U
b00010101000000 V
b010101000 W
b0010101000 X
#3
1/
10
12
b11101 6
17
b10001 8
19
b00001 :
1;
b00100 <
1=
b00001000 >
b00001000 ?
1B
b00010110000000 V
b0010110000 X
#4
0B
#5
b1100101100 #
b0011001100 $
b0000000110 %
b0000010000 &
0/
00
11
02
b00000000 ?
1B
b00010101000000 V
b0010101000 X
#6
0B
#7
b01100101100 +
b00011001100 ,
b11111111010 -
b00000010000 .
1B
#8
0B
#9
b01100101100 '
b00011001100 (
b11111111010 )
b00000010000 *
1B
#10
0B
#11
b00010000000010 3
1B
#12
0B
#13
b00010000000010 5
1B
#14
0B
#15
b00010000000010 4
b000000100 @
b00010000000010 A
1B
b00010101000010 V
#16
0B
#17
b00000010 >
1B
#18
0B
#19
b00000110 ?
b00000000010000 A
1B
b00010101110000 V
b0010101110 X
#20
0B
#21
1B
#22
0B
#23
1B
#24
0B
#25
1B
#26
0B
#27
1B
#28
0B
#29
1B
#30
0B
#31
1B
#32
0B
#33
1B
#34
0B
#35
1B
#36
0B
#37
1B
#38
0B
#39
1B
#40
0B
#41
1B
#42
0B
#43
1B
