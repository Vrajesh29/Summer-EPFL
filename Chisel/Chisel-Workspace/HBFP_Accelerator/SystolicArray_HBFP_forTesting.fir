circuit SystolicArray_HBFP_forTesting :
  module HBFP_MAC :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { a : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}, b : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}}, out : { result : { sign : UInt<1>, man : UInt<6>, exp : UInt<8>}}}

    node exp_addition = add(io.in.a.exp, io.in.b.exp) @[HBFP_GEMM.scala 34:36]
    node _io_out_result_exp_T = sub(UInt<9>("h100"), UInt<1>("h1")) @[HBFP_GEMM.scala 35:59]
    node _io_out_result_exp_T_1 = tail(_io_out_result_exp_T, 1) @[HBFP_GEMM.scala 35:59]
    node _io_out_result_exp_T_2 = gt(exp_addition, _io_out_result_exp_T_1) @[HBFP_GEMM.scala 35:43]
    node _io_out_result_exp_T_3 = sub(UInt<9>("h100"), UInt<1>("h1")) @[HBFP_GEMM.scala 35:80]
    node _io_out_result_exp_T_4 = tail(_io_out_result_exp_T_3, 1) @[HBFP_GEMM.scala 35:80]
    node _io_out_result_exp_T_5 = mux(_io_out_result_exp_T_2, _io_out_result_exp_T_4, exp_addition) @[HBFP_GEMM.scala 35:29]
    io.out.result.exp <= _io_out_result_exp_T_5 @[HBFP_GEMM.scala 35:23]
    reg dotProductRegs_0 : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[HBFP_GEMM.scala 37:53]
    reg dotProductRegs_1 : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[HBFP_GEMM.scala 37:53]
    reg dotProductRegs_2 : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[HBFP_GEMM.scala 37:53]
    reg dotProductRegs_3 : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[HBFP_GEMM.scala 37:53]
    reg two_complement_buffer_0 : SInt<7>, clock with :
      reset => (reset, asSInt(UInt<7>("h0"))) @[HBFP_GEMM.scala 38:60]
    reg two_complement_buffer_1 : SInt<7>, clock with :
      reset => (reset, asSInt(UInt<7>("h0"))) @[HBFP_GEMM.scala 38:60]
    reg two_complement_buffer_2 : SInt<7>, clock with :
      reset => (reset, asSInt(UInt<7>("h0"))) @[HBFP_GEMM.scala 38:60]
    reg two_complement_buffer_3 : SInt<7>, clock with :
      reset => (reset, asSInt(UInt<7>("h0"))) @[HBFP_GEMM.scala 38:60]
    reg signs_0 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[HBFP_GEMM.scala 39:44]
    reg signs_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[HBFP_GEMM.scala 39:44]
    reg signs_2 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[HBFP_GEMM.scala 39:44]
    reg signs_3 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[HBFP_GEMM.scala 39:44]
    node multiplication = mul(io.in.a.man[0], io.in.b.man[0]) @[HBFP_GEMM.scala 42:45]
    node _dotProductRegs_0_T = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 43:65]
    node _dotProductRegs_0_T_1 = tail(_dotProductRegs_0_T, 1) @[HBFP_GEMM.scala 43:65]
    node _dotProductRegs_0_T_2 = gt(multiplication, _dotProductRegs_0_T_1) @[HBFP_GEMM.scala 43:49]
    node _dotProductRegs_0_T_3 = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 43:86]
    node _dotProductRegs_0_T_4 = tail(_dotProductRegs_0_T_3, 1) @[HBFP_GEMM.scala 43:86]
    node _dotProductRegs_0_T_5 = mux(_dotProductRegs_0_T_2, _dotProductRegs_0_T_4, multiplication) @[HBFP_GEMM.scala 43:33]
    dotProductRegs_0 <= _dotProductRegs_0_T_5 @[HBFP_GEMM.scala 43:27]
    node _signs_0_T = xor(io.in.a.sign[0], io.in.b.sign[0]) @[HBFP_GEMM.scala 44:37]
    signs_0 <= _signs_0_T @[HBFP_GEMM.scala 44:18]
    node _two_complement_buffer_0_T = eq(signs_0, UInt<1>("h1")) @[HBFP_GEMM.scala 45:49]
    node _two_complement_buffer_0_T_1 = cat(UInt<1>("h0"), dotProductRegs_0) @[HBFP_GEMM.scala 45:64]
    node _two_complement_buffer_0_T_2 = not(_two_complement_buffer_0_T_1) @[HBFP_GEMM.scala 45:58]
    node _two_complement_buffer_0_T_3 = add(_two_complement_buffer_0_T_2, UInt<1>("h1")) @[HBFP_GEMM.scala 45:86]
    node _two_complement_buffer_0_T_4 = tail(_two_complement_buffer_0_T_3, 1) @[HBFP_GEMM.scala 45:86]
    node _two_complement_buffer_0_T_5 = cat(UInt<1>("h0"), dotProductRegs_0) @[HBFP_GEMM.scala 45:99]
    node _two_complement_buffer_0_T_6 = mux(_two_complement_buffer_0_T, _two_complement_buffer_0_T_4, _two_complement_buffer_0_T_5) @[HBFP_GEMM.scala 45:40]
    node _two_complement_buffer_0_T_7 = asSInt(_two_complement_buffer_0_T_6) @[HBFP_GEMM.scala 45:122]
    two_complement_buffer_0 <= _two_complement_buffer_0_T_7 @[HBFP_GEMM.scala 45:34]
    node multiplication_1 = mul(io.in.a.man[1], io.in.b.man[1]) @[HBFP_GEMM.scala 42:45]
    node _dotProductRegs_1_T = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 43:65]
    node _dotProductRegs_1_T_1 = tail(_dotProductRegs_1_T, 1) @[HBFP_GEMM.scala 43:65]
    node _dotProductRegs_1_T_2 = gt(multiplication_1, _dotProductRegs_1_T_1) @[HBFP_GEMM.scala 43:49]
    node _dotProductRegs_1_T_3 = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 43:86]
    node _dotProductRegs_1_T_4 = tail(_dotProductRegs_1_T_3, 1) @[HBFP_GEMM.scala 43:86]
    node _dotProductRegs_1_T_5 = mux(_dotProductRegs_1_T_2, _dotProductRegs_1_T_4, multiplication_1) @[HBFP_GEMM.scala 43:33]
    dotProductRegs_1 <= _dotProductRegs_1_T_5 @[HBFP_GEMM.scala 43:27]
    node _signs_1_T = xor(io.in.a.sign[1], io.in.b.sign[1]) @[HBFP_GEMM.scala 44:37]
    signs_1 <= _signs_1_T @[HBFP_GEMM.scala 44:18]
    node _two_complement_buffer_1_T = eq(signs_1, UInt<1>("h1")) @[HBFP_GEMM.scala 45:49]
    node _two_complement_buffer_1_T_1 = cat(UInt<1>("h0"), dotProductRegs_1) @[HBFP_GEMM.scala 45:64]
    node _two_complement_buffer_1_T_2 = not(_two_complement_buffer_1_T_1) @[HBFP_GEMM.scala 45:58]
    node _two_complement_buffer_1_T_3 = add(_two_complement_buffer_1_T_2, UInt<1>("h1")) @[HBFP_GEMM.scala 45:86]
    node _two_complement_buffer_1_T_4 = tail(_two_complement_buffer_1_T_3, 1) @[HBFP_GEMM.scala 45:86]
    node _two_complement_buffer_1_T_5 = cat(UInt<1>("h0"), dotProductRegs_1) @[HBFP_GEMM.scala 45:99]
    node _two_complement_buffer_1_T_6 = mux(_two_complement_buffer_1_T, _two_complement_buffer_1_T_4, _two_complement_buffer_1_T_5) @[HBFP_GEMM.scala 45:40]
    node _two_complement_buffer_1_T_7 = asSInt(_two_complement_buffer_1_T_6) @[HBFP_GEMM.scala 45:122]
    two_complement_buffer_1 <= _two_complement_buffer_1_T_7 @[HBFP_GEMM.scala 45:34]
    node multiplication_2 = mul(io.in.a.man[2], io.in.b.man[2]) @[HBFP_GEMM.scala 42:45]
    node _dotProductRegs_2_T = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 43:65]
    node _dotProductRegs_2_T_1 = tail(_dotProductRegs_2_T, 1) @[HBFP_GEMM.scala 43:65]
    node _dotProductRegs_2_T_2 = gt(multiplication_2, _dotProductRegs_2_T_1) @[HBFP_GEMM.scala 43:49]
    node _dotProductRegs_2_T_3 = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 43:86]
    node _dotProductRegs_2_T_4 = tail(_dotProductRegs_2_T_3, 1) @[HBFP_GEMM.scala 43:86]
    node _dotProductRegs_2_T_5 = mux(_dotProductRegs_2_T_2, _dotProductRegs_2_T_4, multiplication_2) @[HBFP_GEMM.scala 43:33]
    dotProductRegs_2 <= _dotProductRegs_2_T_5 @[HBFP_GEMM.scala 43:27]
    node _signs_2_T = xor(io.in.a.sign[2], io.in.b.sign[2]) @[HBFP_GEMM.scala 44:37]
    signs_2 <= _signs_2_T @[HBFP_GEMM.scala 44:18]
    node _two_complement_buffer_2_T = eq(signs_2, UInt<1>("h1")) @[HBFP_GEMM.scala 45:49]
    node _two_complement_buffer_2_T_1 = cat(UInt<1>("h0"), dotProductRegs_2) @[HBFP_GEMM.scala 45:64]
    node _two_complement_buffer_2_T_2 = not(_two_complement_buffer_2_T_1) @[HBFP_GEMM.scala 45:58]
    node _two_complement_buffer_2_T_3 = add(_two_complement_buffer_2_T_2, UInt<1>("h1")) @[HBFP_GEMM.scala 45:86]
    node _two_complement_buffer_2_T_4 = tail(_two_complement_buffer_2_T_3, 1) @[HBFP_GEMM.scala 45:86]
    node _two_complement_buffer_2_T_5 = cat(UInt<1>("h0"), dotProductRegs_2) @[HBFP_GEMM.scala 45:99]
    node _two_complement_buffer_2_T_6 = mux(_two_complement_buffer_2_T, _two_complement_buffer_2_T_4, _two_complement_buffer_2_T_5) @[HBFP_GEMM.scala 45:40]
    node _two_complement_buffer_2_T_7 = asSInt(_two_complement_buffer_2_T_6) @[HBFP_GEMM.scala 45:122]
    two_complement_buffer_2 <= _two_complement_buffer_2_T_7 @[HBFP_GEMM.scala 45:34]
    node multiplication_3 = mul(io.in.a.man[3], io.in.b.man[3]) @[HBFP_GEMM.scala 42:45]
    node _dotProductRegs_3_T = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 43:65]
    node _dotProductRegs_3_T_1 = tail(_dotProductRegs_3_T, 1) @[HBFP_GEMM.scala 43:65]
    node _dotProductRegs_3_T_2 = gt(multiplication_3, _dotProductRegs_3_T_1) @[HBFP_GEMM.scala 43:49]
    node _dotProductRegs_3_T_3 = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 43:86]
    node _dotProductRegs_3_T_4 = tail(_dotProductRegs_3_T_3, 1) @[HBFP_GEMM.scala 43:86]
    node _dotProductRegs_3_T_5 = mux(_dotProductRegs_3_T_2, _dotProductRegs_3_T_4, multiplication_3) @[HBFP_GEMM.scala 43:33]
    dotProductRegs_3 <= _dotProductRegs_3_T_5 @[HBFP_GEMM.scala 43:27]
    node _signs_3_T = xor(io.in.a.sign[3], io.in.b.sign[3]) @[HBFP_GEMM.scala 44:37]
    signs_3 <= _signs_3_T @[HBFP_GEMM.scala 44:18]
    node _two_complement_buffer_3_T = eq(signs_3, UInt<1>("h1")) @[HBFP_GEMM.scala 45:49]
    node _two_complement_buffer_3_T_1 = cat(UInt<1>("h0"), dotProductRegs_3) @[HBFP_GEMM.scala 45:64]
    node _two_complement_buffer_3_T_2 = not(_two_complement_buffer_3_T_1) @[HBFP_GEMM.scala 45:58]
    node _two_complement_buffer_3_T_3 = add(_two_complement_buffer_3_T_2, UInt<1>("h1")) @[HBFP_GEMM.scala 45:86]
    node _two_complement_buffer_3_T_4 = tail(_two_complement_buffer_3_T_3, 1) @[HBFP_GEMM.scala 45:86]
    node _two_complement_buffer_3_T_5 = cat(UInt<1>("h0"), dotProductRegs_3) @[HBFP_GEMM.scala 45:99]
    node _two_complement_buffer_3_T_6 = mux(_two_complement_buffer_3_T, _two_complement_buffer_3_T_4, _two_complement_buffer_3_T_5) @[HBFP_GEMM.scala 45:40]
    node _two_complement_buffer_3_T_7 = asSInt(_two_complement_buffer_3_T_6) @[HBFP_GEMM.scala 45:122]
    two_complement_buffer_3 <= _two_complement_buffer_3_T_7 @[HBFP_GEMM.scala 45:34]
    node _sum_T = add(two_complement_buffer_0, two_complement_buffer_1) @[HBFP_GEMM.scala 48:46]
    node _sum_T_1 = add(_sum_T, two_complement_buffer_2) @[HBFP_GEMM.scala 48:46]
    node sum = add(_sum_T_1, two_complement_buffer_3) @[HBFP_GEMM.scala 48:46]
    reg acc_hbfp : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[HBFP_GEMM.scala 50:27]
    node _acc_hbfp_T = bits(sum, 9, 9) @[HBFP_GEMM.scala 51:24]
    node _acc_hbfp_T_1 = eq(_acc_hbfp_T, UInt<1>("h1")) @[HBFP_GEMM.scala 51:46]
    node _acc_hbfp_T_2 = bits(sum, 8, 0) @[HBFP_GEMM.scala 51:63]
    node _acc_hbfp_T_3 = not(_acc_hbfp_T_2) @[HBFP_GEMM.scala 51:59]
    node _acc_hbfp_T_4 = add(_acc_hbfp_T_3, UInt<1>("h1")) @[HBFP_GEMM.scala 51:88]
    node _acc_hbfp_T_5 = tail(_acc_hbfp_T_4, 1) @[HBFP_GEMM.scala 51:88]
    node _acc_hbfp_T_6 = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 51:108]
    node _acc_hbfp_T_7 = tail(_acc_hbfp_T_6, 1) @[HBFP_GEMM.scala 51:108]
    node _acc_hbfp_T_8 = gt(_acc_hbfp_T_5, _acc_hbfp_T_7) @[HBFP_GEMM.scala 51:95]
    node _acc_hbfp_T_9 = sub(UInt<8>("h80"), UInt<1>("h1")) @[HBFP_GEMM.scala 51:124]
    node _acc_hbfp_T_10 = tail(_acc_hbfp_T_9, 1) @[HBFP_GEMM.scala 51:124]
    node _acc_hbfp_T_11 = bits(sum, 8, 0) @[HBFP_GEMM.scala 51:143]
    node _acc_hbfp_T_12 = cat(UInt<1>("h0"), _acc_hbfp_T_11) @[HBFP_GEMM.scala 51:137]
    node _acc_hbfp_T_13 = not(_acc_hbfp_T_12) @[HBFP_GEMM.scala 51:131]
    node _acc_hbfp_T_14 = add(_acc_hbfp_T_13, UInt<1>("h1")) @[HBFP_GEMM.scala 51:170]
    node _acc_hbfp_T_15 = tail(_acc_hbfp_T_14, 1) @[HBFP_GEMM.scala 51:170]
    node _acc_hbfp_T_16 = mux(_acc_hbfp_T_8, _acc_hbfp_T_10, _acc_hbfp_T_15) @[HBFP_GEMM.scala 51:57]
    node _acc_hbfp_T_17 = bits(sum, 8, 0) @[HBFP_GEMM.scala 52:16]
    node _acc_hbfp_T_18 = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 52:55]
    node _acc_hbfp_T_19 = tail(_acc_hbfp_T_18, 1) @[HBFP_GEMM.scala 52:55]
    node _acc_hbfp_T_20 = gt(_acc_hbfp_T_17, _acc_hbfp_T_19) @[HBFP_GEMM.scala 52:42]
    node _acc_hbfp_T_21 = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 52:73]
    node _acc_hbfp_T_22 = tail(_acc_hbfp_T_21, 1) @[HBFP_GEMM.scala 52:73]
    node _acc_hbfp_T_23 = bits(sum, 8, 0) @[HBFP_GEMM.scala 52:90]
    node _acc_hbfp_T_24 = cat(UInt<1>("h0"), _acc_hbfp_T_23) @[HBFP_GEMM.scala 52:84]
    node _acc_hbfp_T_25 = mux(_acc_hbfp_T_20, _acc_hbfp_T_22, _acc_hbfp_T_24) @[HBFP_GEMM.scala 52:12]
    node _acc_hbfp_T_26 = mux(_acc_hbfp_T_1, _acc_hbfp_T_16, _acc_hbfp_T_25) @[HBFP_GEMM.scala 51:20]
    acc_hbfp <= _acc_hbfp_T_26 @[HBFP_GEMM.scala 51:14]
    node _io_out_result_sign_T = bits(acc_hbfp, 6, 6) @[HBFP_GEMM.scala 54:35]
    io.out.result.sign <= _io_out_result_sign_T @[HBFP_GEMM.scala 54:24]
    node _io_out_result_man_T = bits(acc_hbfp, 5, 0) @[HBFP_GEMM.scala 55:34]
    io.out.result.man <= _io_out_result_man_T @[HBFP_GEMM.scala 55:23]

  module HBFP_Adder :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { a : { sign : UInt<1>, man : UInt<6>, exp : UInt<8>}, b : { sign : UInt<1>, man : UInt<6>, exp : UInt<8>}}, out : { result : { sign : UInt<1>, man : UInt<6>, exp : UInt<8>}}}

    node _exp_diff_T = gt(io.in.a.exp, io.in.b.exp) @[HBFP_GEMM.scala 70:34]
    node _exp_diff_T_1 = sub(io.in.a.exp, io.in.b.exp) @[HBFP_GEMM.scala 70:61]
    node _exp_diff_T_2 = tail(_exp_diff_T_1, 1) @[HBFP_GEMM.scala 70:61]
    node _exp_diff_T_3 = sub(io.in.b.exp, io.in.a.exp) @[HBFP_GEMM.scala 70:88]
    node _exp_diff_T_4 = tail(_exp_diff_T_3, 1) @[HBFP_GEMM.scala 70:88]
    node exp_diff = mux(_exp_diff_T, _exp_diff_T_2, _exp_diff_T_4) @[HBFP_GEMM.scala 70:21]
    node _io_out_result_sign_T = gt(io.in.a.exp, io.in.b.exp) @[HBFP_GEMM.scala 72:41]
    node _io_out_result_sign_T_1 = dshr(io.in.b.man, exp_diff) @[HBFP_GEMM.scala 72:87]
    node _io_out_result_sign_T_2 = gt(io.in.a.man, _io_out_result_sign_T_1) @[HBFP_GEMM.scala 72:72]
    node _io_out_result_sign_T_3 = mux(_io_out_result_sign_T_2, io.in.a.sign, io.in.b.sign) @[HBFP_GEMM.scala 72:59]
    node _io_out_result_sign_T_4 = dshr(io.in.a.man, exp_diff) @[HBFP_GEMM.scala 72:147]
    node _io_out_result_sign_T_5 = gt(_io_out_result_sign_T_4, io.in.b.man) @[HBFP_GEMM.scala 72:158]
    node _io_out_result_sign_T_6 = mux(_io_out_result_sign_T_5, io.in.a.sign, io.in.b.sign) @[HBFP_GEMM.scala 72:133]
    node _io_out_result_sign_T_7 = mux(_io_out_result_sign_T, _io_out_result_sign_T_3, _io_out_result_sign_T_6) @[HBFP_GEMM.scala 72:28]
    io.out.result.sign <= _io_out_result_sign_T_7 @[HBFP_GEMM.scala 72:22]
    node _io_out_result_exp_T = gt(io.in.a.exp, io.in.b.exp) @[HBFP_GEMM.scala 73:40]
    node _io_out_result_exp_T_1 = mux(_io_out_result_exp_T, io.in.a.exp, io.in.b.exp) @[HBFP_GEMM.scala 73:27]
    io.out.result.exp <= _io_out_result_exp_T_1 @[HBFP_GEMM.scala 73:21]
    node _addition_T = gt(io.in.a.exp, io.in.b.exp) @[HBFP_GEMM.scala 74:34]
    node _addition_T_1 = eq(io.in.a.sign, io.in.b.sign) @[HBFP_GEMM.scala 74:66]
    node _addition_T_2 = dshr(io.in.b.man, exp_diff) @[HBFP_GEMM.scala 74:112]
    node _addition_T_3 = add(io.in.a.man, _addition_T_2) @[HBFP_GEMM.scala 74:96]
    node _addition_T_4 = dshr(io.in.b.man, exp_diff) @[HBFP_GEMM.scala 74:157]
    node _addition_T_5 = gt(io.in.a.man, _addition_T_4) @[HBFP_GEMM.scala 74:142]
    node _addition_T_6 = dshr(io.in.b.man, exp_diff) @[HBFP_GEMM.scala 74:197]
    node _addition_T_7 = sub(io.in.a.man, _addition_T_6) @[HBFP_GEMM.scala 74:183]
    node _addition_T_8 = tail(_addition_T_7, 1) @[HBFP_GEMM.scala 74:183]
    node _addition_T_9 = dshr(io.in.b.man, exp_diff) @[HBFP_GEMM.scala 74:223]
    node _addition_T_10 = sub(_addition_T_9, io.in.a.man) @[HBFP_GEMM.scala 74:236]
    node _addition_T_11 = tail(_addition_T_10, 1) @[HBFP_GEMM.scala 74:236]
    node _addition_T_12 = mux(_addition_T_5, _addition_T_8, _addition_T_11) @[HBFP_GEMM.scala 74:129]
    node _addition_T_13 = mux(_addition_T_1, _addition_T_3, _addition_T_12) @[HBFP_GEMM.scala 74:52]
    node _addition_T_14 = eq(io.in.a.sign, io.in.b.sign) @[HBFP_GEMM.scala 74:271]
    node _addition_T_15 = dshr(io.in.a.man, exp_diff) @[HBFP_GEMM.scala 74:317]
    node _addition_T_16 = add(io.in.b.man, _addition_T_15) @[HBFP_GEMM.scala 74:301]
    node _addition_T_17 = dshr(io.in.a.man, exp_diff) @[HBFP_GEMM.scala 74:362]
    node _addition_T_18 = gt(io.in.b.man, _addition_T_17) @[HBFP_GEMM.scala 74:347]
    node _addition_T_19 = dshr(io.in.a.man, exp_diff) @[HBFP_GEMM.scala 74:402]
    node _addition_T_20 = sub(io.in.b.man, _addition_T_19) @[HBFP_GEMM.scala 74:388]
    node _addition_T_21 = tail(_addition_T_20, 1) @[HBFP_GEMM.scala 74:388]
    node _addition_T_22 = dshr(io.in.a.man, exp_diff) @[HBFP_GEMM.scala 74:428]
    node _addition_T_23 = sub(_addition_T_22, io.in.b.man) @[HBFP_GEMM.scala 74:441]
    node _addition_T_24 = tail(_addition_T_23, 1) @[HBFP_GEMM.scala 74:441]
    node _addition_T_25 = mux(_addition_T_18, _addition_T_21, _addition_T_24) @[HBFP_GEMM.scala 74:334]
    node _addition_T_26 = mux(_addition_T_14, _addition_T_16, _addition_T_25) @[HBFP_GEMM.scala 74:257]
    node addition = mux(_addition_T, _addition_T_13, _addition_T_26) @[HBFP_GEMM.scala 74:21]
    node _io_out_result_man_T = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 75:53]
    node _io_out_result_man_T_1 = tail(_io_out_result_man_T, 1) @[HBFP_GEMM.scala 75:53]
    node _io_out_result_man_T_2 = gt(addition, _io_out_result_man_T_1) @[HBFP_GEMM.scala 75:37]
    node _io_out_result_man_T_3 = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 75:74]
    node _io_out_result_man_T_4 = tail(_io_out_result_man_T_3, 1) @[HBFP_GEMM.scala 75:74]
    node _io_out_result_man_T_5 = mux(_io_out_result_man_T_2, _io_out_result_man_T_4, addition) @[HBFP_GEMM.scala 75:27]
    io.out.result.man <= _io_out_result_man_T_5 @[HBFP_GEMM.scala 75:21]

  module HBFP_PE :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { hor : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}, ver : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}}, out : { hor : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}, ver : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}, result : { sign : UInt<1>, man : UInt<6>, exp : UInt<8>}}}

    reg result_buffer : { sign : UInt<1>, man : UInt<6>, exp : UInt<8>}, clock with :
      reset => (UInt<1>("h0"), result_buffer) @[HBFP_GEMM.scala 93:28]
    inst mac of HBFP_MAC @[HBFP_GEMM.scala 95:21]
    mac.clock <= clock
    mac.reset <= reset
    mac.io.in.a <= io.in.hor @[HBFP_GEMM.scala 96:17]
    mac.io.in.b <= io.in.ver @[HBFP_GEMM.scala 97:17]
    inst adder of HBFP_Adder @[HBFP_GEMM.scala 99:23]
    adder.clock <= clock
    adder.reset <= reset
    adder.io.in.a <= mac.io.out.result @[HBFP_GEMM.scala 100:19]
    adder.io.in.b <= result_buffer @[HBFP_GEMM.scala 101:19]
    result_buffer <= adder.io.out.result @[HBFP_GEMM.scala 102:19]
    io.out.hor <= io.in.hor @[HBFP_GEMM.scala 104:16]
    io.out.ver <= io.in.ver @[HBFP_GEMM.scala 105:16]
    io.out.result <= result_buffer @[HBFP_GEMM.scala 106:19]

  module HBFP_MAC_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { a : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}, b : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}}, out : { result : { sign : UInt<1>, man : UInt<6>, exp : UInt<8>}}}

    node exp_addition = add(io.in.a.exp, io.in.b.exp) @[HBFP_GEMM.scala 34:36]
    node _io_out_result_exp_T = sub(UInt<9>("h100"), UInt<1>("h1")) @[HBFP_GEMM.scala 35:59]
    node _io_out_result_exp_T_1 = tail(_io_out_result_exp_T, 1) @[HBFP_GEMM.scala 35:59]
    node _io_out_result_exp_T_2 = gt(exp_addition, _io_out_result_exp_T_1) @[HBFP_GEMM.scala 35:43]
    node _io_out_result_exp_T_3 = sub(UInt<9>("h100"), UInt<1>("h1")) @[HBFP_GEMM.scala 35:80]
    node _io_out_result_exp_T_4 = tail(_io_out_result_exp_T_3, 1) @[HBFP_GEMM.scala 35:80]
    node _io_out_result_exp_T_5 = mux(_io_out_result_exp_T_2, _io_out_result_exp_T_4, exp_addition) @[HBFP_GEMM.scala 35:29]
    io.out.result.exp <= _io_out_result_exp_T_5 @[HBFP_GEMM.scala 35:23]
    reg dotProductRegs_0 : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[HBFP_GEMM.scala 37:53]
    reg dotProductRegs_1 : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[HBFP_GEMM.scala 37:53]
    reg dotProductRegs_2 : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[HBFP_GEMM.scala 37:53]
    reg dotProductRegs_3 : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[HBFP_GEMM.scala 37:53]
    reg two_complement_buffer_0 : SInt<7>, clock with :
      reset => (reset, asSInt(UInt<7>("h0"))) @[HBFP_GEMM.scala 38:60]
    reg two_complement_buffer_1 : SInt<7>, clock with :
      reset => (reset, asSInt(UInt<7>("h0"))) @[HBFP_GEMM.scala 38:60]
    reg two_complement_buffer_2 : SInt<7>, clock with :
      reset => (reset, asSInt(UInt<7>("h0"))) @[HBFP_GEMM.scala 38:60]
    reg two_complement_buffer_3 : SInt<7>, clock with :
      reset => (reset, asSInt(UInt<7>("h0"))) @[HBFP_GEMM.scala 38:60]
    reg signs_0 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[HBFP_GEMM.scala 39:44]
    reg signs_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[HBFP_GEMM.scala 39:44]
    reg signs_2 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[HBFP_GEMM.scala 39:44]
    reg signs_3 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[HBFP_GEMM.scala 39:44]
    node multiplication = mul(io.in.a.man[0], io.in.b.man[0]) @[HBFP_GEMM.scala 42:45]
    node _dotProductRegs_0_T = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 43:65]
    node _dotProductRegs_0_T_1 = tail(_dotProductRegs_0_T, 1) @[HBFP_GEMM.scala 43:65]
    node _dotProductRegs_0_T_2 = gt(multiplication, _dotProductRegs_0_T_1) @[HBFP_GEMM.scala 43:49]
    node _dotProductRegs_0_T_3 = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 43:86]
    node _dotProductRegs_0_T_4 = tail(_dotProductRegs_0_T_3, 1) @[HBFP_GEMM.scala 43:86]
    node _dotProductRegs_0_T_5 = mux(_dotProductRegs_0_T_2, _dotProductRegs_0_T_4, multiplication) @[HBFP_GEMM.scala 43:33]
    dotProductRegs_0 <= _dotProductRegs_0_T_5 @[HBFP_GEMM.scala 43:27]
    node _signs_0_T = xor(io.in.a.sign[0], io.in.b.sign[0]) @[HBFP_GEMM.scala 44:37]
    signs_0 <= _signs_0_T @[HBFP_GEMM.scala 44:18]
    node _two_complement_buffer_0_T = eq(signs_0, UInt<1>("h1")) @[HBFP_GEMM.scala 45:49]
    node _two_complement_buffer_0_T_1 = cat(UInt<1>("h0"), dotProductRegs_0) @[HBFP_GEMM.scala 45:64]
    node _two_complement_buffer_0_T_2 = not(_two_complement_buffer_0_T_1) @[HBFP_GEMM.scala 45:58]
    node _two_complement_buffer_0_T_3 = add(_two_complement_buffer_0_T_2, UInt<1>("h1")) @[HBFP_GEMM.scala 45:86]
    node _two_complement_buffer_0_T_4 = tail(_two_complement_buffer_0_T_3, 1) @[HBFP_GEMM.scala 45:86]
    node _two_complement_buffer_0_T_5 = cat(UInt<1>("h0"), dotProductRegs_0) @[HBFP_GEMM.scala 45:99]
    node _two_complement_buffer_0_T_6 = mux(_two_complement_buffer_0_T, _two_complement_buffer_0_T_4, _two_complement_buffer_0_T_5) @[HBFP_GEMM.scala 45:40]
    node _two_complement_buffer_0_T_7 = asSInt(_two_complement_buffer_0_T_6) @[HBFP_GEMM.scala 45:122]
    two_complement_buffer_0 <= _two_complement_buffer_0_T_7 @[HBFP_GEMM.scala 45:34]
    node multiplication_1 = mul(io.in.a.man[1], io.in.b.man[1]) @[HBFP_GEMM.scala 42:45]
    node _dotProductRegs_1_T = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 43:65]
    node _dotProductRegs_1_T_1 = tail(_dotProductRegs_1_T, 1) @[HBFP_GEMM.scala 43:65]
    node _dotProductRegs_1_T_2 = gt(multiplication_1, _dotProductRegs_1_T_1) @[HBFP_GEMM.scala 43:49]
    node _dotProductRegs_1_T_3 = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 43:86]
    node _dotProductRegs_1_T_4 = tail(_dotProductRegs_1_T_3, 1) @[HBFP_GEMM.scala 43:86]
    node _dotProductRegs_1_T_5 = mux(_dotProductRegs_1_T_2, _dotProductRegs_1_T_4, multiplication_1) @[HBFP_GEMM.scala 43:33]
    dotProductRegs_1 <= _dotProductRegs_1_T_5 @[HBFP_GEMM.scala 43:27]
    node _signs_1_T = xor(io.in.a.sign[1], io.in.b.sign[1]) @[HBFP_GEMM.scala 44:37]
    signs_1 <= _signs_1_T @[HBFP_GEMM.scala 44:18]
    node _two_complement_buffer_1_T = eq(signs_1, UInt<1>("h1")) @[HBFP_GEMM.scala 45:49]
    node _two_complement_buffer_1_T_1 = cat(UInt<1>("h0"), dotProductRegs_1) @[HBFP_GEMM.scala 45:64]
    node _two_complement_buffer_1_T_2 = not(_two_complement_buffer_1_T_1) @[HBFP_GEMM.scala 45:58]
    node _two_complement_buffer_1_T_3 = add(_two_complement_buffer_1_T_2, UInt<1>("h1")) @[HBFP_GEMM.scala 45:86]
    node _two_complement_buffer_1_T_4 = tail(_two_complement_buffer_1_T_3, 1) @[HBFP_GEMM.scala 45:86]
    node _two_complement_buffer_1_T_5 = cat(UInt<1>("h0"), dotProductRegs_1) @[HBFP_GEMM.scala 45:99]
    node _two_complement_buffer_1_T_6 = mux(_two_complement_buffer_1_T, _two_complement_buffer_1_T_4, _two_complement_buffer_1_T_5) @[HBFP_GEMM.scala 45:40]
    node _two_complement_buffer_1_T_7 = asSInt(_two_complement_buffer_1_T_6) @[HBFP_GEMM.scala 45:122]
    two_complement_buffer_1 <= _two_complement_buffer_1_T_7 @[HBFP_GEMM.scala 45:34]
    node multiplication_2 = mul(io.in.a.man[2], io.in.b.man[2]) @[HBFP_GEMM.scala 42:45]
    node _dotProductRegs_2_T = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 43:65]
    node _dotProductRegs_2_T_1 = tail(_dotProductRegs_2_T, 1) @[HBFP_GEMM.scala 43:65]
    node _dotProductRegs_2_T_2 = gt(multiplication_2, _dotProductRegs_2_T_1) @[HBFP_GEMM.scala 43:49]
    node _dotProductRegs_2_T_3 = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 43:86]
    node _dotProductRegs_2_T_4 = tail(_dotProductRegs_2_T_3, 1) @[HBFP_GEMM.scala 43:86]
    node _dotProductRegs_2_T_5 = mux(_dotProductRegs_2_T_2, _dotProductRegs_2_T_4, multiplication_2) @[HBFP_GEMM.scala 43:33]
    dotProductRegs_2 <= _dotProductRegs_2_T_5 @[HBFP_GEMM.scala 43:27]
    node _signs_2_T = xor(io.in.a.sign[2], io.in.b.sign[2]) @[HBFP_GEMM.scala 44:37]
    signs_2 <= _signs_2_T @[HBFP_GEMM.scala 44:18]
    node _two_complement_buffer_2_T = eq(signs_2, UInt<1>("h1")) @[HBFP_GEMM.scala 45:49]
    node _two_complement_buffer_2_T_1 = cat(UInt<1>("h0"), dotProductRegs_2) @[HBFP_GEMM.scala 45:64]
    node _two_complement_buffer_2_T_2 = not(_two_complement_buffer_2_T_1) @[HBFP_GEMM.scala 45:58]
    node _two_complement_buffer_2_T_3 = add(_two_complement_buffer_2_T_2, UInt<1>("h1")) @[HBFP_GEMM.scala 45:86]
    node _two_complement_buffer_2_T_4 = tail(_two_complement_buffer_2_T_3, 1) @[HBFP_GEMM.scala 45:86]
    node _two_complement_buffer_2_T_5 = cat(UInt<1>("h0"), dotProductRegs_2) @[HBFP_GEMM.scala 45:99]
    node _two_complement_buffer_2_T_6 = mux(_two_complement_buffer_2_T, _two_complement_buffer_2_T_4, _two_complement_buffer_2_T_5) @[HBFP_GEMM.scala 45:40]
    node _two_complement_buffer_2_T_7 = asSInt(_two_complement_buffer_2_T_6) @[HBFP_GEMM.scala 45:122]
    two_complement_buffer_2 <= _two_complement_buffer_2_T_7 @[HBFP_GEMM.scala 45:34]
    node multiplication_3 = mul(io.in.a.man[3], io.in.b.man[3]) @[HBFP_GEMM.scala 42:45]
    node _dotProductRegs_3_T = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 43:65]
    node _dotProductRegs_3_T_1 = tail(_dotProductRegs_3_T, 1) @[HBFP_GEMM.scala 43:65]
    node _dotProductRegs_3_T_2 = gt(multiplication_3, _dotProductRegs_3_T_1) @[HBFP_GEMM.scala 43:49]
    node _dotProductRegs_3_T_3 = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 43:86]
    node _dotProductRegs_3_T_4 = tail(_dotProductRegs_3_T_3, 1) @[HBFP_GEMM.scala 43:86]
    node _dotProductRegs_3_T_5 = mux(_dotProductRegs_3_T_2, _dotProductRegs_3_T_4, multiplication_3) @[HBFP_GEMM.scala 43:33]
    dotProductRegs_3 <= _dotProductRegs_3_T_5 @[HBFP_GEMM.scala 43:27]
    node _signs_3_T = xor(io.in.a.sign[3], io.in.b.sign[3]) @[HBFP_GEMM.scala 44:37]
    signs_3 <= _signs_3_T @[HBFP_GEMM.scala 44:18]
    node _two_complement_buffer_3_T = eq(signs_3, UInt<1>("h1")) @[HBFP_GEMM.scala 45:49]
    node _two_complement_buffer_3_T_1 = cat(UInt<1>("h0"), dotProductRegs_3) @[HBFP_GEMM.scala 45:64]
    node _two_complement_buffer_3_T_2 = not(_two_complement_buffer_3_T_1) @[HBFP_GEMM.scala 45:58]
    node _two_complement_buffer_3_T_3 = add(_two_complement_buffer_3_T_2, UInt<1>("h1")) @[HBFP_GEMM.scala 45:86]
    node _two_complement_buffer_3_T_4 = tail(_two_complement_buffer_3_T_3, 1) @[HBFP_GEMM.scala 45:86]
    node _two_complement_buffer_3_T_5 = cat(UInt<1>("h0"), dotProductRegs_3) @[HBFP_GEMM.scala 45:99]
    node _two_complement_buffer_3_T_6 = mux(_two_complement_buffer_3_T, _two_complement_buffer_3_T_4, _two_complement_buffer_3_T_5) @[HBFP_GEMM.scala 45:40]
    node _two_complement_buffer_3_T_7 = asSInt(_two_complement_buffer_3_T_6) @[HBFP_GEMM.scala 45:122]
    two_complement_buffer_3 <= _two_complement_buffer_3_T_7 @[HBFP_GEMM.scala 45:34]
    node _sum_T = add(two_complement_buffer_0, two_complement_buffer_1) @[HBFP_GEMM.scala 48:46]
    node _sum_T_1 = add(_sum_T, two_complement_buffer_2) @[HBFP_GEMM.scala 48:46]
    node sum = add(_sum_T_1, two_complement_buffer_3) @[HBFP_GEMM.scala 48:46]
    reg acc_hbfp : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[HBFP_GEMM.scala 50:27]
    node _acc_hbfp_T = bits(sum, 9, 9) @[HBFP_GEMM.scala 51:24]
    node _acc_hbfp_T_1 = eq(_acc_hbfp_T, UInt<1>("h1")) @[HBFP_GEMM.scala 51:46]
    node _acc_hbfp_T_2 = bits(sum, 8, 0) @[HBFP_GEMM.scala 51:63]
    node _acc_hbfp_T_3 = not(_acc_hbfp_T_2) @[HBFP_GEMM.scala 51:59]
    node _acc_hbfp_T_4 = add(_acc_hbfp_T_3, UInt<1>("h1")) @[HBFP_GEMM.scala 51:88]
    node _acc_hbfp_T_5 = tail(_acc_hbfp_T_4, 1) @[HBFP_GEMM.scala 51:88]
    node _acc_hbfp_T_6 = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 51:108]
    node _acc_hbfp_T_7 = tail(_acc_hbfp_T_6, 1) @[HBFP_GEMM.scala 51:108]
    node _acc_hbfp_T_8 = gt(_acc_hbfp_T_5, _acc_hbfp_T_7) @[HBFP_GEMM.scala 51:95]
    node _acc_hbfp_T_9 = sub(UInt<8>("h80"), UInt<1>("h1")) @[HBFP_GEMM.scala 51:124]
    node _acc_hbfp_T_10 = tail(_acc_hbfp_T_9, 1) @[HBFP_GEMM.scala 51:124]
    node _acc_hbfp_T_11 = bits(sum, 8, 0) @[HBFP_GEMM.scala 51:143]
    node _acc_hbfp_T_12 = cat(UInt<1>("h0"), _acc_hbfp_T_11) @[HBFP_GEMM.scala 51:137]
    node _acc_hbfp_T_13 = not(_acc_hbfp_T_12) @[HBFP_GEMM.scala 51:131]
    node _acc_hbfp_T_14 = add(_acc_hbfp_T_13, UInt<1>("h1")) @[HBFP_GEMM.scala 51:170]
    node _acc_hbfp_T_15 = tail(_acc_hbfp_T_14, 1) @[HBFP_GEMM.scala 51:170]
    node _acc_hbfp_T_16 = mux(_acc_hbfp_T_8, _acc_hbfp_T_10, _acc_hbfp_T_15) @[HBFP_GEMM.scala 51:57]
    node _acc_hbfp_T_17 = bits(sum, 8, 0) @[HBFP_GEMM.scala 52:16]
    node _acc_hbfp_T_18 = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 52:55]
    node _acc_hbfp_T_19 = tail(_acc_hbfp_T_18, 1) @[HBFP_GEMM.scala 52:55]
    node _acc_hbfp_T_20 = gt(_acc_hbfp_T_17, _acc_hbfp_T_19) @[HBFP_GEMM.scala 52:42]
    node _acc_hbfp_T_21 = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 52:73]
    node _acc_hbfp_T_22 = tail(_acc_hbfp_T_21, 1) @[HBFP_GEMM.scala 52:73]
    node _acc_hbfp_T_23 = bits(sum, 8, 0) @[HBFP_GEMM.scala 52:90]
    node _acc_hbfp_T_24 = cat(UInt<1>("h0"), _acc_hbfp_T_23) @[HBFP_GEMM.scala 52:84]
    node _acc_hbfp_T_25 = mux(_acc_hbfp_T_20, _acc_hbfp_T_22, _acc_hbfp_T_24) @[HBFP_GEMM.scala 52:12]
    node _acc_hbfp_T_26 = mux(_acc_hbfp_T_1, _acc_hbfp_T_16, _acc_hbfp_T_25) @[HBFP_GEMM.scala 51:20]
    acc_hbfp <= _acc_hbfp_T_26 @[HBFP_GEMM.scala 51:14]
    node _io_out_result_sign_T = bits(acc_hbfp, 6, 6) @[HBFP_GEMM.scala 54:35]
    io.out.result.sign <= _io_out_result_sign_T @[HBFP_GEMM.scala 54:24]
    node _io_out_result_man_T = bits(acc_hbfp, 5, 0) @[HBFP_GEMM.scala 55:34]
    io.out.result.man <= _io_out_result_man_T @[HBFP_GEMM.scala 55:23]

  module HBFP_Adder_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { a : { sign : UInt<1>, man : UInt<6>, exp : UInt<8>}, b : { sign : UInt<1>, man : UInt<6>, exp : UInt<8>}}, out : { result : { sign : UInt<1>, man : UInt<6>, exp : UInt<8>}}}

    node _exp_diff_T = gt(io.in.a.exp, io.in.b.exp) @[HBFP_GEMM.scala 70:34]
    node _exp_diff_T_1 = sub(io.in.a.exp, io.in.b.exp) @[HBFP_GEMM.scala 70:61]
    node _exp_diff_T_2 = tail(_exp_diff_T_1, 1) @[HBFP_GEMM.scala 70:61]
    node _exp_diff_T_3 = sub(io.in.b.exp, io.in.a.exp) @[HBFP_GEMM.scala 70:88]
    node _exp_diff_T_4 = tail(_exp_diff_T_3, 1) @[HBFP_GEMM.scala 70:88]
    node exp_diff = mux(_exp_diff_T, _exp_diff_T_2, _exp_diff_T_4) @[HBFP_GEMM.scala 70:21]
    node _io_out_result_sign_T = gt(io.in.a.exp, io.in.b.exp) @[HBFP_GEMM.scala 72:41]
    node _io_out_result_sign_T_1 = dshr(io.in.b.man, exp_diff) @[HBFP_GEMM.scala 72:87]
    node _io_out_result_sign_T_2 = gt(io.in.a.man, _io_out_result_sign_T_1) @[HBFP_GEMM.scala 72:72]
    node _io_out_result_sign_T_3 = mux(_io_out_result_sign_T_2, io.in.a.sign, io.in.b.sign) @[HBFP_GEMM.scala 72:59]
    node _io_out_result_sign_T_4 = dshr(io.in.a.man, exp_diff) @[HBFP_GEMM.scala 72:147]
    node _io_out_result_sign_T_5 = gt(_io_out_result_sign_T_4, io.in.b.man) @[HBFP_GEMM.scala 72:158]
    node _io_out_result_sign_T_6 = mux(_io_out_result_sign_T_5, io.in.a.sign, io.in.b.sign) @[HBFP_GEMM.scala 72:133]
    node _io_out_result_sign_T_7 = mux(_io_out_result_sign_T, _io_out_result_sign_T_3, _io_out_result_sign_T_6) @[HBFP_GEMM.scala 72:28]
    io.out.result.sign <= _io_out_result_sign_T_7 @[HBFP_GEMM.scala 72:22]
    node _io_out_result_exp_T = gt(io.in.a.exp, io.in.b.exp) @[HBFP_GEMM.scala 73:40]
    node _io_out_result_exp_T_1 = mux(_io_out_result_exp_T, io.in.a.exp, io.in.b.exp) @[HBFP_GEMM.scala 73:27]
    io.out.result.exp <= _io_out_result_exp_T_1 @[HBFP_GEMM.scala 73:21]
    node _addition_T = gt(io.in.a.exp, io.in.b.exp) @[HBFP_GEMM.scala 74:34]
    node _addition_T_1 = eq(io.in.a.sign, io.in.b.sign) @[HBFP_GEMM.scala 74:66]
    node _addition_T_2 = dshr(io.in.b.man, exp_diff) @[HBFP_GEMM.scala 74:112]
    node _addition_T_3 = add(io.in.a.man, _addition_T_2) @[HBFP_GEMM.scala 74:96]
    node _addition_T_4 = dshr(io.in.b.man, exp_diff) @[HBFP_GEMM.scala 74:157]
    node _addition_T_5 = gt(io.in.a.man, _addition_T_4) @[HBFP_GEMM.scala 74:142]
    node _addition_T_6 = dshr(io.in.b.man, exp_diff) @[HBFP_GEMM.scala 74:197]
    node _addition_T_7 = sub(io.in.a.man, _addition_T_6) @[HBFP_GEMM.scala 74:183]
    node _addition_T_8 = tail(_addition_T_7, 1) @[HBFP_GEMM.scala 74:183]
    node _addition_T_9 = dshr(io.in.b.man, exp_diff) @[HBFP_GEMM.scala 74:223]
    node _addition_T_10 = sub(_addition_T_9, io.in.a.man) @[HBFP_GEMM.scala 74:236]
    node _addition_T_11 = tail(_addition_T_10, 1) @[HBFP_GEMM.scala 74:236]
    node _addition_T_12 = mux(_addition_T_5, _addition_T_8, _addition_T_11) @[HBFP_GEMM.scala 74:129]
    node _addition_T_13 = mux(_addition_T_1, _addition_T_3, _addition_T_12) @[HBFP_GEMM.scala 74:52]
    node _addition_T_14 = eq(io.in.a.sign, io.in.b.sign) @[HBFP_GEMM.scala 74:271]
    node _addition_T_15 = dshr(io.in.a.man, exp_diff) @[HBFP_GEMM.scala 74:317]
    node _addition_T_16 = add(io.in.b.man, _addition_T_15) @[HBFP_GEMM.scala 74:301]
    node _addition_T_17 = dshr(io.in.a.man, exp_diff) @[HBFP_GEMM.scala 74:362]
    node _addition_T_18 = gt(io.in.b.man, _addition_T_17) @[HBFP_GEMM.scala 74:347]
    node _addition_T_19 = dshr(io.in.a.man, exp_diff) @[HBFP_GEMM.scala 74:402]
    node _addition_T_20 = sub(io.in.b.man, _addition_T_19) @[HBFP_GEMM.scala 74:388]
    node _addition_T_21 = tail(_addition_T_20, 1) @[HBFP_GEMM.scala 74:388]
    node _addition_T_22 = dshr(io.in.a.man, exp_diff) @[HBFP_GEMM.scala 74:428]
    node _addition_T_23 = sub(_addition_T_22, io.in.b.man) @[HBFP_GEMM.scala 74:441]
    node _addition_T_24 = tail(_addition_T_23, 1) @[HBFP_GEMM.scala 74:441]
    node _addition_T_25 = mux(_addition_T_18, _addition_T_21, _addition_T_24) @[HBFP_GEMM.scala 74:334]
    node _addition_T_26 = mux(_addition_T_14, _addition_T_16, _addition_T_25) @[HBFP_GEMM.scala 74:257]
    node addition = mux(_addition_T, _addition_T_13, _addition_T_26) @[HBFP_GEMM.scala 74:21]
    node _io_out_result_man_T = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 75:53]
    node _io_out_result_man_T_1 = tail(_io_out_result_man_T, 1) @[HBFP_GEMM.scala 75:53]
    node _io_out_result_man_T_2 = gt(addition, _io_out_result_man_T_1) @[HBFP_GEMM.scala 75:37]
    node _io_out_result_man_T_3 = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 75:74]
    node _io_out_result_man_T_4 = tail(_io_out_result_man_T_3, 1) @[HBFP_GEMM.scala 75:74]
    node _io_out_result_man_T_5 = mux(_io_out_result_man_T_2, _io_out_result_man_T_4, addition) @[HBFP_GEMM.scala 75:27]
    io.out.result.man <= _io_out_result_man_T_5 @[HBFP_GEMM.scala 75:21]

  module HBFP_PE_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { hor : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}, ver : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}}, out : { hor : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}, ver : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}, result : { sign : UInt<1>, man : UInt<6>, exp : UInt<8>}}}

    reg result_buffer : { sign : UInt<1>, man : UInt<6>, exp : UInt<8>}, clock with :
      reset => (UInt<1>("h0"), result_buffer) @[HBFP_GEMM.scala 93:28]
    inst mac of HBFP_MAC_1 @[HBFP_GEMM.scala 95:21]
    mac.clock <= clock
    mac.reset <= reset
    mac.io.in.a <= io.in.hor @[HBFP_GEMM.scala 96:17]
    mac.io.in.b <= io.in.ver @[HBFP_GEMM.scala 97:17]
    inst adder of HBFP_Adder_1 @[HBFP_GEMM.scala 99:23]
    adder.clock <= clock
    adder.reset <= reset
    adder.io.in.a <= mac.io.out.result @[HBFP_GEMM.scala 100:19]
    adder.io.in.b <= result_buffer @[HBFP_GEMM.scala 101:19]
    result_buffer <= adder.io.out.result @[HBFP_GEMM.scala 102:19]
    io.out.hor <= io.in.hor @[HBFP_GEMM.scala 104:16]
    io.out.ver <= io.in.ver @[HBFP_GEMM.scala 105:16]
    io.out.result <= result_buffer @[HBFP_GEMM.scala 106:19]

  module HBFP_MAC_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { a : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}, b : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}}, out : { result : { sign : UInt<1>, man : UInt<6>, exp : UInt<8>}}}

    node exp_addition = add(io.in.a.exp, io.in.b.exp) @[HBFP_GEMM.scala 34:36]
    node _io_out_result_exp_T = sub(UInt<9>("h100"), UInt<1>("h1")) @[HBFP_GEMM.scala 35:59]
    node _io_out_result_exp_T_1 = tail(_io_out_result_exp_T, 1) @[HBFP_GEMM.scala 35:59]
    node _io_out_result_exp_T_2 = gt(exp_addition, _io_out_result_exp_T_1) @[HBFP_GEMM.scala 35:43]
    node _io_out_result_exp_T_3 = sub(UInt<9>("h100"), UInt<1>("h1")) @[HBFP_GEMM.scala 35:80]
    node _io_out_result_exp_T_4 = tail(_io_out_result_exp_T_3, 1) @[HBFP_GEMM.scala 35:80]
    node _io_out_result_exp_T_5 = mux(_io_out_result_exp_T_2, _io_out_result_exp_T_4, exp_addition) @[HBFP_GEMM.scala 35:29]
    io.out.result.exp <= _io_out_result_exp_T_5 @[HBFP_GEMM.scala 35:23]
    reg dotProductRegs_0 : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[HBFP_GEMM.scala 37:53]
    reg dotProductRegs_1 : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[HBFP_GEMM.scala 37:53]
    reg dotProductRegs_2 : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[HBFP_GEMM.scala 37:53]
    reg dotProductRegs_3 : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[HBFP_GEMM.scala 37:53]
    reg two_complement_buffer_0 : SInt<7>, clock with :
      reset => (reset, asSInt(UInt<7>("h0"))) @[HBFP_GEMM.scala 38:60]
    reg two_complement_buffer_1 : SInt<7>, clock with :
      reset => (reset, asSInt(UInt<7>("h0"))) @[HBFP_GEMM.scala 38:60]
    reg two_complement_buffer_2 : SInt<7>, clock with :
      reset => (reset, asSInt(UInt<7>("h0"))) @[HBFP_GEMM.scala 38:60]
    reg two_complement_buffer_3 : SInt<7>, clock with :
      reset => (reset, asSInt(UInt<7>("h0"))) @[HBFP_GEMM.scala 38:60]
    reg signs_0 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[HBFP_GEMM.scala 39:44]
    reg signs_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[HBFP_GEMM.scala 39:44]
    reg signs_2 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[HBFP_GEMM.scala 39:44]
    reg signs_3 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[HBFP_GEMM.scala 39:44]
    node multiplication = mul(io.in.a.man[0], io.in.b.man[0]) @[HBFP_GEMM.scala 42:45]
    node _dotProductRegs_0_T = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 43:65]
    node _dotProductRegs_0_T_1 = tail(_dotProductRegs_0_T, 1) @[HBFP_GEMM.scala 43:65]
    node _dotProductRegs_0_T_2 = gt(multiplication, _dotProductRegs_0_T_1) @[HBFP_GEMM.scala 43:49]
    node _dotProductRegs_0_T_3 = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 43:86]
    node _dotProductRegs_0_T_4 = tail(_dotProductRegs_0_T_3, 1) @[HBFP_GEMM.scala 43:86]
    node _dotProductRegs_0_T_5 = mux(_dotProductRegs_0_T_2, _dotProductRegs_0_T_4, multiplication) @[HBFP_GEMM.scala 43:33]
    dotProductRegs_0 <= _dotProductRegs_0_T_5 @[HBFP_GEMM.scala 43:27]
    node _signs_0_T = xor(io.in.a.sign[0], io.in.b.sign[0]) @[HBFP_GEMM.scala 44:37]
    signs_0 <= _signs_0_T @[HBFP_GEMM.scala 44:18]
    node _two_complement_buffer_0_T = eq(signs_0, UInt<1>("h1")) @[HBFP_GEMM.scala 45:49]
    node _two_complement_buffer_0_T_1 = cat(UInt<1>("h0"), dotProductRegs_0) @[HBFP_GEMM.scala 45:64]
    node _two_complement_buffer_0_T_2 = not(_two_complement_buffer_0_T_1) @[HBFP_GEMM.scala 45:58]
    node _two_complement_buffer_0_T_3 = add(_two_complement_buffer_0_T_2, UInt<1>("h1")) @[HBFP_GEMM.scala 45:86]
    node _two_complement_buffer_0_T_4 = tail(_two_complement_buffer_0_T_3, 1) @[HBFP_GEMM.scala 45:86]
    node _two_complement_buffer_0_T_5 = cat(UInt<1>("h0"), dotProductRegs_0) @[HBFP_GEMM.scala 45:99]
    node _two_complement_buffer_0_T_6 = mux(_two_complement_buffer_0_T, _two_complement_buffer_0_T_4, _two_complement_buffer_0_T_5) @[HBFP_GEMM.scala 45:40]
    node _two_complement_buffer_0_T_7 = asSInt(_two_complement_buffer_0_T_6) @[HBFP_GEMM.scala 45:122]
    two_complement_buffer_0 <= _two_complement_buffer_0_T_7 @[HBFP_GEMM.scala 45:34]
    node multiplication_1 = mul(io.in.a.man[1], io.in.b.man[1]) @[HBFP_GEMM.scala 42:45]
    node _dotProductRegs_1_T = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 43:65]
    node _dotProductRegs_1_T_1 = tail(_dotProductRegs_1_T, 1) @[HBFP_GEMM.scala 43:65]
    node _dotProductRegs_1_T_2 = gt(multiplication_1, _dotProductRegs_1_T_1) @[HBFP_GEMM.scala 43:49]
    node _dotProductRegs_1_T_3 = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 43:86]
    node _dotProductRegs_1_T_4 = tail(_dotProductRegs_1_T_3, 1) @[HBFP_GEMM.scala 43:86]
    node _dotProductRegs_1_T_5 = mux(_dotProductRegs_1_T_2, _dotProductRegs_1_T_4, multiplication_1) @[HBFP_GEMM.scala 43:33]
    dotProductRegs_1 <= _dotProductRegs_1_T_5 @[HBFP_GEMM.scala 43:27]
    node _signs_1_T = xor(io.in.a.sign[1], io.in.b.sign[1]) @[HBFP_GEMM.scala 44:37]
    signs_1 <= _signs_1_T @[HBFP_GEMM.scala 44:18]
    node _two_complement_buffer_1_T = eq(signs_1, UInt<1>("h1")) @[HBFP_GEMM.scala 45:49]
    node _two_complement_buffer_1_T_1 = cat(UInt<1>("h0"), dotProductRegs_1) @[HBFP_GEMM.scala 45:64]
    node _two_complement_buffer_1_T_2 = not(_two_complement_buffer_1_T_1) @[HBFP_GEMM.scala 45:58]
    node _two_complement_buffer_1_T_3 = add(_two_complement_buffer_1_T_2, UInt<1>("h1")) @[HBFP_GEMM.scala 45:86]
    node _two_complement_buffer_1_T_4 = tail(_two_complement_buffer_1_T_3, 1) @[HBFP_GEMM.scala 45:86]
    node _two_complement_buffer_1_T_5 = cat(UInt<1>("h0"), dotProductRegs_1) @[HBFP_GEMM.scala 45:99]
    node _two_complement_buffer_1_T_6 = mux(_two_complement_buffer_1_T, _two_complement_buffer_1_T_4, _two_complement_buffer_1_T_5) @[HBFP_GEMM.scala 45:40]
    node _two_complement_buffer_1_T_7 = asSInt(_two_complement_buffer_1_T_6) @[HBFP_GEMM.scala 45:122]
    two_complement_buffer_1 <= _two_complement_buffer_1_T_7 @[HBFP_GEMM.scala 45:34]
    node multiplication_2 = mul(io.in.a.man[2], io.in.b.man[2]) @[HBFP_GEMM.scala 42:45]
    node _dotProductRegs_2_T = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 43:65]
    node _dotProductRegs_2_T_1 = tail(_dotProductRegs_2_T, 1) @[HBFP_GEMM.scala 43:65]
    node _dotProductRegs_2_T_2 = gt(multiplication_2, _dotProductRegs_2_T_1) @[HBFP_GEMM.scala 43:49]
    node _dotProductRegs_2_T_3 = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 43:86]
    node _dotProductRegs_2_T_4 = tail(_dotProductRegs_2_T_3, 1) @[HBFP_GEMM.scala 43:86]
    node _dotProductRegs_2_T_5 = mux(_dotProductRegs_2_T_2, _dotProductRegs_2_T_4, multiplication_2) @[HBFP_GEMM.scala 43:33]
    dotProductRegs_2 <= _dotProductRegs_2_T_5 @[HBFP_GEMM.scala 43:27]
    node _signs_2_T = xor(io.in.a.sign[2], io.in.b.sign[2]) @[HBFP_GEMM.scala 44:37]
    signs_2 <= _signs_2_T @[HBFP_GEMM.scala 44:18]
    node _two_complement_buffer_2_T = eq(signs_2, UInt<1>("h1")) @[HBFP_GEMM.scala 45:49]
    node _two_complement_buffer_2_T_1 = cat(UInt<1>("h0"), dotProductRegs_2) @[HBFP_GEMM.scala 45:64]
    node _two_complement_buffer_2_T_2 = not(_two_complement_buffer_2_T_1) @[HBFP_GEMM.scala 45:58]
    node _two_complement_buffer_2_T_3 = add(_two_complement_buffer_2_T_2, UInt<1>("h1")) @[HBFP_GEMM.scala 45:86]
    node _two_complement_buffer_2_T_4 = tail(_two_complement_buffer_2_T_3, 1) @[HBFP_GEMM.scala 45:86]
    node _two_complement_buffer_2_T_5 = cat(UInt<1>("h0"), dotProductRegs_2) @[HBFP_GEMM.scala 45:99]
    node _two_complement_buffer_2_T_6 = mux(_two_complement_buffer_2_T, _two_complement_buffer_2_T_4, _two_complement_buffer_2_T_5) @[HBFP_GEMM.scala 45:40]
    node _two_complement_buffer_2_T_7 = asSInt(_two_complement_buffer_2_T_6) @[HBFP_GEMM.scala 45:122]
    two_complement_buffer_2 <= _two_complement_buffer_2_T_7 @[HBFP_GEMM.scala 45:34]
    node multiplication_3 = mul(io.in.a.man[3], io.in.b.man[3]) @[HBFP_GEMM.scala 42:45]
    node _dotProductRegs_3_T = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 43:65]
    node _dotProductRegs_3_T_1 = tail(_dotProductRegs_3_T, 1) @[HBFP_GEMM.scala 43:65]
    node _dotProductRegs_3_T_2 = gt(multiplication_3, _dotProductRegs_3_T_1) @[HBFP_GEMM.scala 43:49]
    node _dotProductRegs_3_T_3 = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 43:86]
    node _dotProductRegs_3_T_4 = tail(_dotProductRegs_3_T_3, 1) @[HBFP_GEMM.scala 43:86]
    node _dotProductRegs_3_T_5 = mux(_dotProductRegs_3_T_2, _dotProductRegs_3_T_4, multiplication_3) @[HBFP_GEMM.scala 43:33]
    dotProductRegs_3 <= _dotProductRegs_3_T_5 @[HBFP_GEMM.scala 43:27]
    node _signs_3_T = xor(io.in.a.sign[3], io.in.b.sign[3]) @[HBFP_GEMM.scala 44:37]
    signs_3 <= _signs_3_T @[HBFP_GEMM.scala 44:18]
    node _two_complement_buffer_3_T = eq(signs_3, UInt<1>("h1")) @[HBFP_GEMM.scala 45:49]
    node _two_complement_buffer_3_T_1 = cat(UInt<1>("h0"), dotProductRegs_3) @[HBFP_GEMM.scala 45:64]
    node _two_complement_buffer_3_T_2 = not(_two_complement_buffer_3_T_1) @[HBFP_GEMM.scala 45:58]
    node _two_complement_buffer_3_T_3 = add(_two_complement_buffer_3_T_2, UInt<1>("h1")) @[HBFP_GEMM.scala 45:86]
    node _two_complement_buffer_3_T_4 = tail(_two_complement_buffer_3_T_3, 1) @[HBFP_GEMM.scala 45:86]
    node _two_complement_buffer_3_T_5 = cat(UInt<1>("h0"), dotProductRegs_3) @[HBFP_GEMM.scala 45:99]
    node _two_complement_buffer_3_T_6 = mux(_two_complement_buffer_3_T, _two_complement_buffer_3_T_4, _two_complement_buffer_3_T_5) @[HBFP_GEMM.scala 45:40]
    node _two_complement_buffer_3_T_7 = asSInt(_two_complement_buffer_3_T_6) @[HBFP_GEMM.scala 45:122]
    two_complement_buffer_3 <= _two_complement_buffer_3_T_7 @[HBFP_GEMM.scala 45:34]
    node _sum_T = add(two_complement_buffer_0, two_complement_buffer_1) @[HBFP_GEMM.scala 48:46]
    node _sum_T_1 = add(_sum_T, two_complement_buffer_2) @[HBFP_GEMM.scala 48:46]
    node sum = add(_sum_T_1, two_complement_buffer_3) @[HBFP_GEMM.scala 48:46]
    reg acc_hbfp : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[HBFP_GEMM.scala 50:27]
    node _acc_hbfp_T = bits(sum, 9, 9) @[HBFP_GEMM.scala 51:24]
    node _acc_hbfp_T_1 = eq(_acc_hbfp_T, UInt<1>("h1")) @[HBFP_GEMM.scala 51:46]
    node _acc_hbfp_T_2 = bits(sum, 8, 0) @[HBFP_GEMM.scala 51:63]
    node _acc_hbfp_T_3 = not(_acc_hbfp_T_2) @[HBFP_GEMM.scala 51:59]
    node _acc_hbfp_T_4 = add(_acc_hbfp_T_3, UInt<1>("h1")) @[HBFP_GEMM.scala 51:88]
    node _acc_hbfp_T_5 = tail(_acc_hbfp_T_4, 1) @[HBFP_GEMM.scala 51:88]
    node _acc_hbfp_T_6 = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 51:108]
    node _acc_hbfp_T_7 = tail(_acc_hbfp_T_6, 1) @[HBFP_GEMM.scala 51:108]
    node _acc_hbfp_T_8 = gt(_acc_hbfp_T_5, _acc_hbfp_T_7) @[HBFP_GEMM.scala 51:95]
    node _acc_hbfp_T_9 = sub(UInt<8>("h80"), UInt<1>("h1")) @[HBFP_GEMM.scala 51:124]
    node _acc_hbfp_T_10 = tail(_acc_hbfp_T_9, 1) @[HBFP_GEMM.scala 51:124]
    node _acc_hbfp_T_11 = bits(sum, 8, 0) @[HBFP_GEMM.scala 51:143]
    node _acc_hbfp_T_12 = cat(UInt<1>("h0"), _acc_hbfp_T_11) @[HBFP_GEMM.scala 51:137]
    node _acc_hbfp_T_13 = not(_acc_hbfp_T_12) @[HBFP_GEMM.scala 51:131]
    node _acc_hbfp_T_14 = add(_acc_hbfp_T_13, UInt<1>("h1")) @[HBFP_GEMM.scala 51:170]
    node _acc_hbfp_T_15 = tail(_acc_hbfp_T_14, 1) @[HBFP_GEMM.scala 51:170]
    node _acc_hbfp_T_16 = mux(_acc_hbfp_T_8, _acc_hbfp_T_10, _acc_hbfp_T_15) @[HBFP_GEMM.scala 51:57]
    node _acc_hbfp_T_17 = bits(sum, 8, 0) @[HBFP_GEMM.scala 52:16]
    node _acc_hbfp_T_18 = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 52:55]
    node _acc_hbfp_T_19 = tail(_acc_hbfp_T_18, 1) @[HBFP_GEMM.scala 52:55]
    node _acc_hbfp_T_20 = gt(_acc_hbfp_T_17, _acc_hbfp_T_19) @[HBFP_GEMM.scala 52:42]
    node _acc_hbfp_T_21 = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 52:73]
    node _acc_hbfp_T_22 = tail(_acc_hbfp_T_21, 1) @[HBFP_GEMM.scala 52:73]
    node _acc_hbfp_T_23 = bits(sum, 8, 0) @[HBFP_GEMM.scala 52:90]
    node _acc_hbfp_T_24 = cat(UInt<1>("h0"), _acc_hbfp_T_23) @[HBFP_GEMM.scala 52:84]
    node _acc_hbfp_T_25 = mux(_acc_hbfp_T_20, _acc_hbfp_T_22, _acc_hbfp_T_24) @[HBFP_GEMM.scala 52:12]
    node _acc_hbfp_T_26 = mux(_acc_hbfp_T_1, _acc_hbfp_T_16, _acc_hbfp_T_25) @[HBFP_GEMM.scala 51:20]
    acc_hbfp <= _acc_hbfp_T_26 @[HBFP_GEMM.scala 51:14]
    node _io_out_result_sign_T = bits(acc_hbfp, 6, 6) @[HBFP_GEMM.scala 54:35]
    io.out.result.sign <= _io_out_result_sign_T @[HBFP_GEMM.scala 54:24]
    node _io_out_result_man_T = bits(acc_hbfp, 5, 0) @[HBFP_GEMM.scala 55:34]
    io.out.result.man <= _io_out_result_man_T @[HBFP_GEMM.scala 55:23]

  module HBFP_Adder_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { a : { sign : UInt<1>, man : UInt<6>, exp : UInt<8>}, b : { sign : UInt<1>, man : UInt<6>, exp : UInt<8>}}, out : { result : { sign : UInt<1>, man : UInt<6>, exp : UInt<8>}}}

    node _exp_diff_T = gt(io.in.a.exp, io.in.b.exp) @[HBFP_GEMM.scala 70:34]
    node _exp_diff_T_1 = sub(io.in.a.exp, io.in.b.exp) @[HBFP_GEMM.scala 70:61]
    node _exp_diff_T_2 = tail(_exp_diff_T_1, 1) @[HBFP_GEMM.scala 70:61]
    node _exp_diff_T_3 = sub(io.in.b.exp, io.in.a.exp) @[HBFP_GEMM.scala 70:88]
    node _exp_diff_T_4 = tail(_exp_diff_T_3, 1) @[HBFP_GEMM.scala 70:88]
    node exp_diff = mux(_exp_diff_T, _exp_diff_T_2, _exp_diff_T_4) @[HBFP_GEMM.scala 70:21]
    node _io_out_result_sign_T = gt(io.in.a.exp, io.in.b.exp) @[HBFP_GEMM.scala 72:41]
    node _io_out_result_sign_T_1 = dshr(io.in.b.man, exp_diff) @[HBFP_GEMM.scala 72:87]
    node _io_out_result_sign_T_2 = gt(io.in.a.man, _io_out_result_sign_T_1) @[HBFP_GEMM.scala 72:72]
    node _io_out_result_sign_T_3 = mux(_io_out_result_sign_T_2, io.in.a.sign, io.in.b.sign) @[HBFP_GEMM.scala 72:59]
    node _io_out_result_sign_T_4 = dshr(io.in.a.man, exp_diff) @[HBFP_GEMM.scala 72:147]
    node _io_out_result_sign_T_5 = gt(_io_out_result_sign_T_4, io.in.b.man) @[HBFP_GEMM.scala 72:158]
    node _io_out_result_sign_T_6 = mux(_io_out_result_sign_T_5, io.in.a.sign, io.in.b.sign) @[HBFP_GEMM.scala 72:133]
    node _io_out_result_sign_T_7 = mux(_io_out_result_sign_T, _io_out_result_sign_T_3, _io_out_result_sign_T_6) @[HBFP_GEMM.scala 72:28]
    io.out.result.sign <= _io_out_result_sign_T_7 @[HBFP_GEMM.scala 72:22]
    node _io_out_result_exp_T = gt(io.in.a.exp, io.in.b.exp) @[HBFP_GEMM.scala 73:40]
    node _io_out_result_exp_T_1 = mux(_io_out_result_exp_T, io.in.a.exp, io.in.b.exp) @[HBFP_GEMM.scala 73:27]
    io.out.result.exp <= _io_out_result_exp_T_1 @[HBFP_GEMM.scala 73:21]
    node _addition_T = gt(io.in.a.exp, io.in.b.exp) @[HBFP_GEMM.scala 74:34]
    node _addition_T_1 = eq(io.in.a.sign, io.in.b.sign) @[HBFP_GEMM.scala 74:66]
    node _addition_T_2 = dshr(io.in.b.man, exp_diff) @[HBFP_GEMM.scala 74:112]
    node _addition_T_3 = add(io.in.a.man, _addition_T_2) @[HBFP_GEMM.scala 74:96]
    node _addition_T_4 = dshr(io.in.b.man, exp_diff) @[HBFP_GEMM.scala 74:157]
    node _addition_T_5 = gt(io.in.a.man, _addition_T_4) @[HBFP_GEMM.scala 74:142]
    node _addition_T_6 = dshr(io.in.b.man, exp_diff) @[HBFP_GEMM.scala 74:197]
    node _addition_T_7 = sub(io.in.a.man, _addition_T_6) @[HBFP_GEMM.scala 74:183]
    node _addition_T_8 = tail(_addition_T_7, 1) @[HBFP_GEMM.scala 74:183]
    node _addition_T_9 = dshr(io.in.b.man, exp_diff) @[HBFP_GEMM.scala 74:223]
    node _addition_T_10 = sub(_addition_T_9, io.in.a.man) @[HBFP_GEMM.scala 74:236]
    node _addition_T_11 = tail(_addition_T_10, 1) @[HBFP_GEMM.scala 74:236]
    node _addition_T_12 = mux(_addition_T_5, _addition_T_8, _addition_T_11) @[HBFP_GEMM.scala 74:129]
    node _addition_T_13 = mux(_addition_T_1, _addition_T_3, _addition_T_12) @[HBFP_GEMM.scala 74:52]
    node _addition_T_14 = eq(io.in.a.sign, io.in.b.sign) @[HBFP_GEMM.scala 74:271]
    node _addition_T_15 = dshr(io.in.a.man, exp_diff) @[HBFP_GEMM.scala 74:317]
    node _addition_T_16 = add(io.in.b.man, _addition_T_15) @[HBFP_GEMM.scala 74:301]
    node _addition_T_17 = dshr(io.in.a.man, exp_diff) @[HBFP_GEMM.scala 74:362]
    node _addition_T_18 = gt(io.in.b.man, _addition_T_17) @[HBFP_GEMM.scala 74:347]
    node _addition_T_19 = dshr(io.in.a.man, exp_diff) @[HBFP_GEMM.scala 74:402]
    node _addition_T_20 = sub(io.in.b.man, _addition_T_19) @[HBFP_GEMM.scala 74:388]
    node _addition_T_21 = tail(_addition_T_20, 1) @[HBFP_GEMM.scala 74:388]
    node _addition_T_22 = dshr(io.in.a.man, exp_diff) @[HBFP_GEMM.scala 74:428]
    node _addition_T_23 = sub(_addition_T_22, io.in.b.man) @[HBFP_GEMM.scala 74:441]
    node _addition_T_24 = tail(_addition_T_23, 1) @[HBFP_GEMM.scala 74:441]
    node _addition_T_25 = mux(_addition_T_18, _addition_T_21, _addition_T_24) @[HBFP_GEMM.scala 74:334]
    node _addition_T_26 = mux(_addition_T_14, _addition_T_16, _addition_T_25) @[HBFP_GEMM.scala 74:257]
    node addition = mux(_addition_T, _addition_T_13, _addition_T_26) @[HBFP_GEMM.scala 74:21]
    node _io_out_result_man_T = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 75:53]
    node _io_out_result_man_T_1 = tail(_io_out_result_man_T, 1) @[HBFP_GEMM.scala 75:53]
    node _io_out_result_man_T_2 = gt(addition, _io_out_result_man_T_1) @[HBFP_GEMM.scala 75:37]
    node _io_out_result_man_T_3 = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 75:74]
    node _io_out_result_man_T_4 = tail(_io_out_result_man_T_3, 1) @[HBFP_GEMM.scala 75:74]
    node _io_out_result_man_T_5 = mux(_io_out_result_man_T_2, _io_out_result_man_T_4, addition) @[HBFP_GEMM.scala 75:27]
    io.out.result.man <= _io_out_result_man_T_5 @[HBFP_GEMM.scala 75:21]

  module HBFP_PE_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { hor : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}, ver : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}}, out : { hor : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}, ver : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}, result : { sign : UInt<1>, man : UInt<6>, exp : UInt<8>}}}

    reg result_buffer : { sign : UInt<1>, man : UInt<6>, exp : UInt<8>}, clock with :
      reset => (UInt<1>("h0"), result_buffer) @[HBFP_GEMM.scala 93:28]
    inst mac of HBFP_MAC_2 @[HBFP_GEMM.scala 95:21]
    mac.clock <= clock
    mac.reset <= reset
    mac.io.in.a <= io.in.hor @[HBFP_GEMM.scala 96:17]
    mac.io.in.b <= io.in.ver @[HBFP_GEMM.scala 97:17]
    inst adder of HBFP_Adder_2 @[HBFP_GEMM.scala 99:23]
    adder.clock <= clock
    adder.reset <= reset
    adder.io.in.a <= mac.io.out.result @[HBFP_GEMM.scala 100:19]
    adder.io.in.b <= result_buffer @[HBFP_GEMM.scala 101:19]
    result_buffer <= adder.io.out.result @[HBFP_GEMM.scala 102:19]
    io.out.hor <= io.in.hor @[HBFP_GEMM.scala 104:16]
    io.out.ver <= io.in.ver @[HBFP_GEMM.scala 105:16]
    io.out.result <= result_buffer @[HBFP_GEMM.scala 106:19]

  module HBFP_MAC_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { a : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}, b : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}}, out : { result : { sign : UInt<1>, man : UInt<6>, exp : UInt<8>}}}

    node exp_addition = add(io.in.a.exp, io.in.b.exp) @[HBFP_GEMM.scala 34:36]
    node _io_out_result_exp_T = sub(UInt<9>("h100"), UInt<1>("h1")) @[HBFP_GEMM.scala 35:59]
    node _io_out_result_exp_T_1 = tail(_io_out_result_exp_T, 1) @[HBFP_GEMM.scala 35:59]
    node _io_out_result_exp_T_2 = gt(exp_addition, _io_out_result_exp_T_1) @[HBFP_GEMM.scala 35:43]
    node _io_out_result_exp_T_3 = sub(UInt<9>("h100"), UInt<1>("h1")) @[HBFP_GEMM.scala 35:80]
    node _io_out_result_exp_T_4 = tail(_io_out_result_exp_T_3, 1) @[HBFP_GEMM.scala 35:80]
    node _io_out_result_exp_T_5 = mux(_io_out_result_exp_T_2, _io_out_result_exp_T_4, exp_addition) @[HBFP_GEMM.scala 35:29]
    io.out.result.exp <= _io_out_result_exp_T_5 @[HBFP_GEMM.scala 35:23]
    reg dotProductRegs_0 : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[HBFP_GEMM.scala 37:53]
    reg dotProductRegs_1 : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[HBFP_GEMM.scala 37:53]
    reg dotProductRegs_2 : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[HBFP_GEMM.scala 37:53]
    reg dotProductRegs_3 : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[HBFP_GEMM.scala 37:53]
    reg two_complement_buffer_0 : SInt<7>, clock with :
      reset => (reset, asSInt(UInt<7>("h0"))) @[HBFP_GEMM.scala 38:60]
    reg two_complement_buffer_1 : SInt<7>, clock with :
      reset => (reset, asSInt(UInt<7>("h0"))) @[HBFP_GEMM.scala 38:60]
    reg two_complement_buffer_2 : SInt<7>, clock with :
      reset => (reset, asSInt(UInt<7>("h0"))) @[HBFP_GEMM.scala 38:60]
    reg two_complement_buffer_3 : SInt<7>, clock with :
      reset => (reset, asSInt(UInt<7>("h0"))) @[HBFP_GEMM.scala 38:60]
    reg signs_0 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[HBFP_GEMM.scala 39:44]
    reg signs_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[HBFP_GEMM.scala 39:44]
    reg signs_2 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[HBFP_GEMM.scala 39:44]
    reg signs_3 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[HBFP_GEMM.scala 39:44]
    node multiplication = mul(io.in.a.man[0], io.in.b.man[0]) @[HBFP_GEMM.scala 42:45]
    node _dotProductRegs_0_T = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 43:65]
    node _dotProductRegs_0_T_1 = tail(_dotProductRegs_0_T, 1) @[HBFP_GEMM.scala 43:65]
    node _dotProductRegs_0_T_2 = gt(multiplication, _dotProductRegs_0_T_1) @[HBFP_GEMM.scala 43:49]
    node _dotProductRegs_0_T_3 = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 43:86]
    node _dotProductRegs_0_T_4 = tail(_dotProductRegs_0_T_3, 1) @[HBFP_GEMM.scala 43:86]
    node _dotProductRegs_0_T_5 = mux(_dotProductRegs_0_T_2, _dotProductRegs_0_T_4, multiplication) @[HBFP_GEMM.scala 43:33]
    dotProductRegs_0 <= _dotProductRegs_0_T_5 @[HBFP_GEMM.scala 43:27]
    node _signs_0_T = xor(io.in.a.sign[0], io.in.b.sign[0]) @[HBFP_GEMM.scala 44:37]
    signs_0 <= _signs_0_T @[HBFP_GEMM.scala 44:18]
    node _two_complement_buffer_0_T = eq(signs_0, UInt<1>("h1")) @[HBFP_GEMM.scala 45:49]
    node _two_complement_buffer_0_T_1 = cat(UInt<1>("h0"), dotProductRegs_0) @[HBFP_GEMM.scala 45:64]
    node _two_complement_buffer_0_T_2 = not(_two_complement_buffer_0_T_1) @[HBFP_GEMM.scala 45:58]
    node _two_complement_buffer_0_T_3 = add(_two_complement_buffer_0_T_2, UInt<1>("h1")) @[HBFP_GEMM.scala 45:86]
    node _two_complement_buffer_0_T_4 = tail(_two_complement_buffer_0_T_3, 1) @[HBFP_GEMM.scala 45:86]
    node _two_complement_buffer_0_T_5 = cat(UInt<1>("h0"), dotProductRegs_0) @[HBFP_GEMM.scala 45:99]
    node _two_complement_buffer_0_T_6 = mux(_two_complement_buffer_0_T, _two_complement_buffer_0_T_4, _two_complement_buffer_0_T_5) @[HBFP_GEMM.scala 45:40]
    node _two_complement_buffer_0_T_7 = asSInt(_two_complement_buffer_0_T_6) @[HBFP_GEMM.scala 45:122]
    two_complement_buffer_0 <= _two_complement_buffer_0_T_7 @[HBFP_GEMM.scala 45:34]
    node multiplication_1 = mul(io.in.a.man[1], io.in.b.man[1]) @[HBFP_GEMM.scala 42:45]
    node _dotProductRegs_1_T = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 43:65]
    node _dotProductRegs_1_T_1 = tail(_dotProductRegs_1_T, 1) @[HBFP_GEMM.scala 43:65]
    node _dotProductRegs_1_T_2 = gt(multiplication_1, _dotProductRegs_1_T_1) @[HBFP_GEMM.scala 43:49]
    node _dotProductRegs_1_T_3 = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 43:86]
    node _dotProductRegs_1_T_4 = tail(_dotProductRegs_1_T_3, 1) @[HBFP_GEMM.scala 43:86]
    node _dotProductRegs_1_T_5 = mux(_dotProductRegs_1_T_2, _dotProductRegs_1_T_4, multiplication_1) @[HBFP_GEMM.scala 43:33]
    dotProductRegs_1 <= _dotProductRegs_1_T_5 @[HBFP_GEMM.scala 43:27]
    node _signs_1_T = xor(io.in.a.sign[1], io.in.b.sign[1]) @[HBFP_GEMM.scala 44:37]
    signs_1 <= _signs_1_T @[HBFP_GEMM.scala 44:18]
    node _two_complement_buffer_1_T = eq(signs_1, UInt<1>("h1")) @[HBFP_GEMM.scala 45:49]
    node _two_complement_buffer_1_T_1 = cat(UInt<1>("h0"), dotProductRegs_1) @[HBFP_GEMM.scala 45:64]
    node _two_complement_buffer_1_T_2 = not(_two_complement_buffer_1_T_1) @[HBFP_GEMM.scala 45:58]
    node _two_complement_buffer_1_T_3 = add(_two_complement_buffer_1_T_2, UInt<1>("h1")) @[HBFP_GEMM.scala 45:86]
    node _two_complement_buffer_1_T_4 = tail(_two_complement_buffer_1_T_3, 1) @[HBFP_GEMM.scala 45:86]
    node _two_complement_buffer_1_T_5 = cat(UInt<1>("h0"), dotProductRegs_1) @[HBFP_GEMM.scala 45:99]
    node _two_complement_buffer_1_T_6 = mux(_two_complement_buffer_1_T, _two_complement_buffer_1_T_4, _two_complement_buffer_1_T_5) @[HBFP_GEMM.scala 45:40]
    node _two_complement_buffer_1_T_7 = asSInt(_two_complement_buffer_1_T_6) @[HBFP_GEMM.scala 45:122]
    two_complement_buffer_1 <= _two_complement_buffer_1_T_7 @[HBFP_GEMM.scala 45:34]
    node multiplication_2 = mul(io.in.a.man[2], io.in.b.man[2]) @[HBFP_GEMM.scala 42:45]
    node _dotProductRegs_2_T = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 43:65]
    node _dotProductRegs_2_T_1 = tail(_dotProductRegs_2_T, 1) @[HBFP_GEMM.scala 43:65]
    node _dotProductRegs_2_T_2 = gt(multiplication_2, _dotProductRegs_2_T_1) @[HBFP_GEMM.scala 43:49]
    node _dotProductRegs_2_T_3 = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 43:86]
    node _dotProductRegs_2_T_4 = tail(_dotProductRegs_2_T_3, 1) @[HBFP_GEMM.scala 43:86]
    node _dotProductRegs_2_T_5 = mux(_dotProductRegs_2_T_2, _dotProductRegs_2_T_4, multiplication_2) @[HBFP_GEMM.scala 43:33]
    dotProductRegs_2 <= _dotProductRegs_2_T_5 @[HBFP_GEMM.scala 43:27]
    node _signs_2_T = xor(io.in.a.sign[2], io.in.b.sign[2]) @[HBFP_GEMM.scala 44:37]
    signs_2 <= _signs_2_T @[HBFP_GEMM.scala 44:18]
    node _two_complement_buffer_2_T = eq(signs_2, UInt<1>("h1")) @[HBFP_GEMM.scala 45:49]
    node _two_complement_buffer_2_T_1 = cat(UInt<1>("h0"), dotProductRegs_2) @[HBFP_GEMM.scala 45:64]
    node _two_complement_buffer_2_T_2 = not(_two_complement_buffer_2_T_1) @[HBFP_GEMM.scala 45:58]
    node _two_complement_buffer_2_T_3 = add(_two_complement_buffer_2_T_2, UInt<1>("h1")) @[HBFP_GEMM.scala 45:86]
    node _two_complement_buffer_2_T_4 = tail(_two_complement_buffer_2_T_3, 1) @[HBFP_GEMM.scala 45:86]
    node _two_complement_buffer_2_T_5 = cat(UInt<1>("h0"), dotProductRegs_2) @[HBFP_GEMM.scala 45:99]
    node _two_complement_buffer_2_T_6 = mux(_two_complement_buffer_2_T, _two_complement_buffer_2_T_4, _two_complement_buffer_2_T_5) @[HBFP_GEMM.scala 45:40]
    node _two_complement_buffer_2_T_7 = asSInt(_two_complement_buffer_2_T_6) @[HBFP_GEMM.scala 45:122]
    two_complement_buffer_2 <= _two_complement_buffer_2_T_7 @[HBFP_GEMM.scala 45:34]
    node multiplication_3 = mul(io.in.a.man[3], io.in.b.man[3]) @[HBFP_GEMM.scala 42:45]
    node _dotProductRegs_3_T = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 43:65]
    node _dotProductRegs_3_T_1 = tail(_dotProductRegs_3_T, 1) @[HBFP_GEMM.scala 43:65]
    node _dotProductRegs_3_T_2 = gt(multiplication_3, _dotProductRegs_3_T_1) @[HBFP_GEMM.scala 43:49]
    node _dotProductRegs_3_T_3 = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 43:86]
    node _dotProductRegs_3_T_4 = tail(_dotProductRegs_3_T_3, 1) @[HBFP_GEMM.scala 43:86]
    node _dotProductRegs_3_T_5 = mux(_dotProductRegs_3_T_2, _dotProductRegs_3_T_4, multiplication_3) @[HBFP_GEMM.scala 43:33]
    dotProductRegs_3 <= _dotProductRegs_3_T_5 @[HBFP_GEMM.scala 43:27]
    node _signs_3_T = xor(io.in.a.sign[3], io.in.b.sign[3]) @[HBFP_GEMM.scala 44:37]
    signs_3 <= _signs_3_T @[HBFP_GEMM.scala 44:18]
    node _two_complement_buffer_3_T = eq(signs_3, UInt<1>("h1")) @[HBFP_GEMM.scala 45:49]
    node _two_complement_buffer_3_T_1 = cat(UInt<1>("h0"), dotProductRegs_3) @[HBFP_GEMM.scala 45:64]
    node _two_complement_buffer_3_T_2 = not(_two_complement_buffer_3_T_1) @[HBFP_GEMM.scala 45:58]
    node _two_complement_buffer_3_T_3 = add(_two_complement_buffer_3_T_2, UInt<1>("h1")) @[HBFP_GEMM.scala 45:86]
    node _two_complement_buffer_3_T_4 = tail(_two_complement_buffer_3_T_3, 1) @[HBFP_GEMM.scala 45:86]
    node _two_complement_buffer_3_T_5 = cat(UInt<1>("h0"), dotProductRegs_3) @[HBFP_GEMM.scala 45:99]
    node _two_complement_buffer_3_T_6 = mux(_two_complement_buffer_3_T, _two_complement_buffer_3_T_4, _two_complement_buffer_3_T_5) @[HBFP_GEMM.scala 45:40]
    node _two_complement_buffer_3_T_7 = asSInt(_two_complement_buffer_3_T_6) @[HBFP_GEMM.scala 45:122]
    two_complement_buffer_3 <= _two_complement_buffer_3_T_7 @[HBFP_GEMM.scala 45:34]
    node _sum_T = add(two_complement_buffer_0, two_complement_buffer_1) @[HBFP_GEMM.scala 48:46]
    node _sum_T_1 = add(_sum_T, two_complement_buffer_2) @[HBFP_GEMM.scala 48:46]
    node sum = add(_sum_T_1, two_complement_buffer_3) @[HBFP_GEMM.scala 48:46]
    reg acc_hbfp : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[HBFP_GEMM.scala 50:27]
    node _acc_hbfp_T = bits(sum, 9, 9) @[HBFP_GEMM.scala 51:24]
    node _acc_hbfp_T_1 = eq(_acc_hbfp_T, UInt<1>("h1")) @[HBFP_GEMM.scala 51:46]
    node _acc_hbfp_T_2 = bits(sum, 8, 0) @[HBFP_GEMM.scala 51:63]
    node _acc_hbfp_T_3 = not(_acc_hbfp_T_2) @[HBFP_GEMM.scala 51:59]
    node _acc_hbfp_T_4 = add(_acc_hbfp_T_3, UInt<1>("h1")) @[HBFP_GEMM.scala 51:88]
    node _acc_hbfp_T_5 = tail(_acc_hbfp_T_4, 1) @[HBFP_GEMM.scala 51:88]
    node _acc_hbfp_T_6 = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 51:108]
    node _acc_hbfp_T_7 = tail(_acc_hbfp_T_6, 1) @[HBFP_GEMM.scala 51:108]
    node _acc_hbfp_T_8 = gt(_acc_hbfp_T_5, _acc_hbfp_T_7) @[HBFP_GEMM.scala 51:95]
    node _acc_hbfp_T_9 = sub(UInt<8>("h80"), UInt<1>("h1")) @[HBFP_GEMM.scala 51:124]
    node _acc_hbfp_T_10 = tail(_acc_hbfp_T_9, 1) @[HBFP_GEMM.scala 51:124]
    node _acc_hbfp_T_11 = bits(sum, 8, 0) @[HBFP_GEMM.scala 51:143]
    node _acc_hbfp_T_12 = cat(UInt<1>("h0"), _acc_hbfp_T_11) @[HBFP_GEMM.scala 51:137]
    node _acc_hbfp_T_13 = not(_acc_hbfp_T_12) @[HBFP_GEMM.scala 51:131]
    node _acc_hbfp_T_14 = add(_acc_hbfp_T_13, UInt<1>("h1")) @[HBFP_GEMM.scala 51:170]
    node _acc_hbfp_T_15 = tail(_acc_hbfp_T_14, 1) @[HBFP_GEMM.scala 51:170]
    node _acc_hbfp_T_16 = mux(_acc_hbfp_T_8, _acc_hbfp_T_10, _acc_hbfp_T_15) @[HBFP_GEMM.scala 51:57]
    node _acc_hbfp_T_17 = bits(sum, 8, 0) @[HBFP_GEMM.scala 52:16]
    node _acc_hbfp_T_18 = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 52:55]
    node _acc_hbfp_T_19 = tail(_acc_hbfp_T_18, 1) @[HBFP_GEMM.scala 52:55]
    node _acc_hbfp_T_20 = gt(_acc_hbfp_T_17, _acc_hbfp_T_19) @[HBFP_GEMM.scala 52:42]
    node _acc_hbfp_T_21 = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 52:73]
    node _acc_hbfp_T_22 = tail(_acc_hbfp_T_21, 1) @[HBFP_GEMM.scala 52:73]
    node _acc_hbfp_T_23 = bits(sum, 8, 0) @[HBFP_GEMM.scala 52:90]
    node _acc_hbfp_T_24 = cat(UInt<1>("h0"), _acc_hbfp_T_23) @[HBFP_GEMM.scala 52:84]
    node _acc_hbfp_T_25 = mux(_acc_hbfp_T_20, _acc_hbfp_T_22, _acc_hbfp_T_24) @[HBFP_GEMM.scala 52:12]
    node _acc_hbfp_T_26 = mux(_acc_hbfp_T_1, _acc_hbfp_T_16, _acc_hbfp_T_25) @[HBFP_GEMM.scala 51:20]
    acc_hbfp <= _acc_hbfp_T_26 @[HBFP_GEMM.scala 51:14]
    node _io_out_result_sign_T = bits(acc_hbfp, 6, 6) @[HBFP_GEMM.scala 54:35]
    io.out.result.sign <= _io_out_result_sign_T @[HBFP_GEMM.scala 54:24]
    node _io_out_result_man_T = bits(acc_hbfp, 5, 0) @[HBFP_GEMM.scala 55:34]
    io.out.result.man <= _io_out_result_man_T @[HBFP_GEMM.scala 55:23]

  module HBFP_Adder_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { a : { sign : UInt<1>, man : UInt<6>, exp : UInt<8>}, b : { sign : UInt<1>, man : UInt<6>, exp : UInt<8>}}, out : { result : { sign : UInt<1>, man : UInt<6>, exp : UInt<8>}}}

    node _exp_diff_T = gt(io.in.a.exp, io.in.b.exp) @[HBFP_GEMM.scala 70:34]
    node _exp_diff_T_1 = sub(io.in.a.exp, io.in.b.exp) @[HBFP_GEMM.scala 70:61]
    node _exp_diff_T_2 = tail(_exp_diff_T_1, 1) @[HBFP_GEMM.scala 70:61]
    node _exp_diff_T_3 = sub(io.in.b.exp, io.in.a.exp) @[HBFP_GEMM.scala 70:88]
    node _exp_diff_T_4 = tail(_exp_diff_T_3, 1) @[HBFP_GEMM.scala 70:88]
    node exp_diff = mux(_exp_diff_T, _exp_diff_T_2, _exp_diff_T_4) @[HBFP_GEMM.scala 70:21]
    node _io_out_result_sign_T = gt(io.in.a.exp, io.in.b.exp) @[HBFP_GEMM.scala 72:41]
    node _io_out_result_sign_T_1 = dshr(io.in.b.man, exp_diff) @[HBFP_GEMM.scala 72:87]
    node _io_out_result_sign_T_2 = gt(io.in.a.man, _io_out_result_sign_T_1) @[HBFP_GEMM.scala 72:72]
    node _io_out_result_sign_T_3 = mux(_io_out_result_sign_T_2, io.in.a.sign, io.in.b.sign) @[HBFP_GEMM.scala 72:59]
    node _io_out_result_sign_T_4 = dshr(io.in.a.man, exp_diff) @[HBFP_GEMM.scala 72:147]
    node _io_out_result_sign_T_5 = gt(_io_out_result_sign_T_4, io.in.b.man) @[HBFP_GEMM.scala 72:158]
    node _io_out_result_sign_T_6 = mux(_io_out_result_sign_T_5, io.in.a.sign, io.in.b.sign) @[HBFP_GEMM.scala 72:133]
    node _io_out_result_sign_T_7 = mux(_io_out_result_sign_T, _io_out_result_sign_T_3, _io_out_result_sign_T_6) @[HBFP_GEMM.scala 72:28]
    io.out.result.sign <= _io_out_result_sign_T_7 @[HBFP_GEMM.scala 72:22]
    node _io_out_result_exp_T = gt(io.in.a.exp, io.in.b.exp) @[HBFP_GEMM.scala 73:40]
    node _io_out_result_exp_T_1 = mux(_io_out_result_exp_T, io.in.a.exp, io.in.b.exp) @[HBFP_GEMM.scala 73:27]
    io.out.result.exp <= _io_out_result_exp_T_1 @[HBFP_GEMM.scala 73:21]
    node _addition_T = gt(io.in.a.exp, io.in.b.exp) @[HBFP_GEMM.scala 74:34]
    node _addition_T_1 = eq(io.in.a.sign, io.in.b.sign) @[HBFP_GEMM.scala 74:66]
    node _addition_T_2 = dshr(io.in.b.man, exp_diff) @[HBFP_GEMM.scala 74:112]
    node _addition_T_3 = add(io.in.a.man, _addition_T_2) @[HBFP_GEMM.scala 74:96]
    node _addition_T_4 = dshr(io.in.b.man, exp_diff) @[HBFP_GEMM.scala 74:157]
    node _addition_T_5 = gt(io.in.a.man, _addition_T_4) @[HBFP_GEMM.scala 74:142]
    node _addition_T_6 = dshr(io.in.b.man, exp_diff) @[HBFP_GEMM.scala 74:197]
    node _addition_T_7 = sub(io.in.a.man, _addition_T_6) @[HBFP_GEMM.scala 74:183]
    node _addition_T_8 = tail(_addition_T_7, 1) @[HBFP_GEMM.scala 74:183]
    node _addition_T_9 = dshr(io.in.b.man, exp_diff) @[HBFP_GEMM.scala 74:223]
    node _addition_T_10 = sub(_addition_T_9, io.in.a.man) @[HBFP_GEMM.scala 74:236]
    node _addition_T_11 = tail(_addition_T_10, 1) @[HBFP_GEMM.scala 74:236]
    node _addition_T_12 = mux(_addition_T_5, _addition_T_8, _addition_T_11) @[HBFP_GEMM.scala 74:129]
    node _addition_T_13 = mux(_addition_T_1, _addition_T_3, _addition_T_12) @[HBFP_GEMM.scala 74:52]
    node _addition_T_14 = eq(io.in.a.sign, io.in.b.sign) @[HBFP_GEMM.scala 74:271]
    node _addition_T_15 = dshr(io.in.a.man, exp_diff) @[HBFP_GEMM.scala 74:317]
    node _addition_T_16 = add(io.in.b.man, _addition_T_15) @[HBFP_GEMM.scala 74:301]
    node _addition_T_17 = dshr(io.in.a.man, exp_diff) @[HBFP_GEMM.scala 74:362]
    node _addition_T_18 = gt(io.in.b.man, _addition_T_17) @[HBFP_GEMM.scala 74:347]
    node _addition_T_19 = dshr(io.in.a.man, exp_diff) @[HBFP_GEMM.scala 74:402]
    node _addition_T_20 = sub(io.in.b.man, _addition_T_19) @[HBFP_GEMM.scala 74:388]
    node _addition_T_21 = tail(_addition_T_20, 1) @[HBFP_GEMM.scala 74:388]
    node _addition_T_22 = dshr(io.in.a.man, exp_diff) @[HBFP_GEMM.scala 74:428]
    node _addition_T_23 = sub(_addition_T_22, io.in.b.man) @[HBFP_GEMM.scala 74:441]
    node _addition_T_24 = tail(_addition_T_23, 1) @[HBFP_GEMM.scala 74:441]
    node _addition_T_25 = mux(_addition_T_18, _addition_T_21, _addition_T_24) @[HBFP_GEMM.scala 74:334]
    node _addition_T_26 = mux(_addition_T_14, _addition_T_16, _addition_T_25) @[HBFP_GEMM.scala 74:257]
    node addition = mux(_addition_T, _addition_T_13, _addition_T_26) @[HBFP_GEMM.scala 74:21]
    node _io_out_result_man_T = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 75:53]
    node _io_out_result_man_T_1 = tail(_io_out_result_man_T, 1) @[HBFP_GEMM.scala 75:53]
    node _io_out_result_man_T_2 = gt(addition, _io_out_result_man_T_1) @[HBFP_GEMM.scala 75:37]
    node _io_out_result_man_T_3 = sub(UInt<7>("h40"), UInt<1>("h1")) @[HBFP_GEMM.scala 75:74]
    node _io_out_result_man_T_4 = tail(_io_out_result_man_T_3, 1) @[HBFP_GEMM.scala 75:74]
    node _io_out_result_man_T_5 = mux(_io_out_result_man_T_2, _io_out_result_man_T_4, addition) @[HBFP_GEMM.scala 75:27]
    io.out.result.man <= _io_out_result_man_T_5 @[HBFP_GEMM.scala 75:21]

  module HBFP_PE_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { hor : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}, ver : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}}, out : { hor : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}, ver : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}, result : { sign : UInt<1>, man : UInt<6>, exp : UInt<8>}}}

    reg result_buffer : { sign : UInt<1>, man : UInt<6>, exp : UInt<8>}, clock with :
      reset => (UInt<1>("h0"), result_buffer) @[HBFP_GEMM.scala 93:28]
    inst mac of HBFP_MAC_3 @[HBFP_GEMM.scala 95:21]
    mac.clock <= clock
    mac.reset <= reset
    mac.io.in.a <= io.in.hor @[HBFP_GEMM.scala 96:17]
    mac.io.in.b <= io.in.ver @[HBFP_GEMM.scala 97:17]
    inst adder of HBFP_Adder_3 @[HBFP_GEMM.scala 99:23]
    adder.clock <= clock
    adder.reset <= reset
    adder.io.in.a <= mac.io.out.result @[HBFP_GEMM.scala 100:19]
    adder.io.in.b <= result_buffer @[HBFP_GEMM.scala 101:19]
    result_buffer <= adder.io.out.result @[HBFP_GEMM.scala 102:19]
    io.out.hor <= io.in.hor @[HBFP_GEMM.scala 104:16]
    io.out.ver <= io.in.ver @[HBFP_GEMM.scala 105:16]
    io.out.result <= result_buffer @[HBFP_GEMM.scala 106:19]

  module Queue :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}}, count : UInt<2>}

    cmem ram : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}}, count : UInt<2>}

    cmem ram : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}}, count : UInt<2>}

    cmem ram : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}}, count : UInt<2>}

    cmem ram : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>} [2] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module SystolicArray_HBFP_forTesting :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip in : { hor : { ready : UInt<1>, valid : UInt<1>, bits : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}}[2], ver : { ready : UInt<1>, valid : UInt<1>, bits : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}}[2]}, out : { result : { sign : UInt<1>, man : UInt<6>, exp : UInt<8>}}[2][2]}

    inst pes_0_0 of HBFP_PE @[HBFP_GEMM.scala 122:34]
    pes_0_0.clock <= clock
    pes_0_0.reset <= reset
    inst pes_0_1 of HBFP_PE_1 @[HBFP_GEMM.scala 122:34]
    pes_0_1.clock <= clock
    pes_0_1.reset <= reset
    inst pes_1_0 of HBFP_PE_2 @[HBFP_GEMM.scala 122:34]
    pes_1_0.clock <= clock
    pes_1_0.reset <= reset
    inst pes_1_1 of HBFP_PE_3 @[HBFP_GEMM.scala 122:34]
    pes_1_1.clock <= clock
    pes_1_1.reset <= reset
    inst myinputQ_hor_0 of Queue @[HBFP_GEMM.scala 124:40]
    myinputQ_hor_0.clock <= clock
    myinputQ_hor_0.reset <= reset
    inst myinputQ_hor_1 of Queue_1 @[HBFP_GEMM.scala 124:40]
    myinputQ_hor_1.clock <= clock
    myinputQ_hor_1.reset <= reset
    inst myinputQ_ver_0 of Queue_2 @[HBFP_GEMM.scala 125:40]
    myinputQ_ver_0.clock <= clock
    myinputQ_ver_0.reset <= reset
    inst myinputQ_ver_1 of Queue_3 @[HBFP_GEMM.scala 125:40]
    myinputQ_ver_1.clock <= clock
    myinputQ_ver_1.reset <= reset
    myinputQ_hor_0.io.enq.valid <= UInt<1>("h1") @[HBFP_GEMM.scala 129:34]
    myinputQ_hor_0.io.enq.bits.exp <= io.in.hor[0].bits.exp @[HBFP_GEMM.scala 130:33]
    myinputQ_hor_0.io.enq.bits.man[0] <= io.in.hor[0].bits.man[0] @[HBFP_GEMM.scala 130:33]
    myinputQ_hor_0.io.enq.bits.man[1] <= io.in.hor[0].bits.man[1] @[HBFP_GEMM.scala 130:33]
    myinputQ_hor_0.io.enq.bits.man[2] <= io.in.hor[0].bits.man[2] @[HBFP_GEMM.scala 130:33]
    myinputQ_hor_0.io.enq.bits.man[3] <= io.in.hor[0].bits.man[3] @[HBFP_GEMM.scala 130:33]
    myinputQ_hor_0.io.enq.bits.sign[0] <= io.in.hor[0].bits.sign[0] @[HBFP_GEMM.scala 130:33]
    myinputQ_hor_0.io.enq.bits.sign[1] <= io.in.hor[0].bits.sign[1] @[HBFP_GEMM.scala 130:33]
    myinputQ_hor_0.io.enq.bits.sign[2] <= io.in.hor[0].bits.sign[2] @[HBFP_GEMM.scala 130:33]
    myinputQ_hor_0.io.enq.bits.sign[3] <= io.in.hor[0].bits.sign[3] @[HBFP_GEMM.scala 130:33]
    myinputQ_ver_0.io.enq.valid <= UInt<1>("h1") @[HBFP_GEMM.scala 132:34]
    myinputQ_ver_0.io.enq.bits.exp <= io.in.ver[0].bits.exp @[HBFP_GEMM.scala 133:33]
    myinputQ_ver_0.io.enq.bits.man[0] <= io.in.ver[0].bits.man[0] @[HBFP_GEMM.scala 133:33]
    myinputQ_ver_0.io.enq.bits.man[1] <= io.in.ver[0].bits.man[1] @[HBFP_GEMM.scala 133:33]
    myinputQ_ver_0.io.enq.bits.man[2] <= io.in.ver[0].bits.man[2] @[HBFP_GEMM.scala 133:33]
    myinputQ_ver_0.io.enq.bits.man[3] <= io.in.ver[0].bits.man[3] @[HBFP_GEMM.scala 133:33]
    myinputQ_ver_0.io.enq.bits.sign[0] <= io.in.ver[0].bits.sign[0] @[HBFP_GEMM.scala 133:33]
    myinputQ_ver_0.io.enq.bits.sign[1] <= io.in.ver[0].bits.sign[1] @[HBFP_GEMM.scala 133:33]
    myinputQ_ver_0.io.enq.bits.sign[2] <= io.in.ver[0].bits.sign[2] @[HBFP_GEMM.scala 133:33]
    myinputQ_ver_0.io.enq.bits.sign[3] <= io.in.ver[0].bits.sign[3] @[HBFP_GEMM.scala 133:33]
    myinputQ_hor_1.io.enq.valid <= UInt<1>("h1") @[HBFP_GEMM.scala 129:34]
    myinputQ_hor_1.io.enq.bits.exp <= io.in.hor[1].bits.exp @[HBFP_GEMM.scala 130:33]
    myinputQ_hor_1.io.enq.bits.man[0] <= io.in.hor[1].bits.man[0] @[HBFP_GEMM.scala 130:33]
    myinputQ_hor_1.io.enq.bits.man[1] <= io.in.hor[1].bits.man[1] @[HBFP_GEMM.scala 130:33]
    myinputQ_hor_1.io.enq.bits.man[2] <= io.in.hor[1].bits.man[2] @[HBFP_GEMM.scala 130:33]
    myinputQ_hor_1.io.enq.bits.man[3] <= io.in.hor[1].bits.man[3] @[HBFP_GEMM.scala 130:33]
    myinputQ_hor_1.io.enq.bits.sign[0] <= io.in.hor[1].bits.sign[0] @[HBFP_GEMM.scala 130:33]
    myinputQ_hor_1.io.enq.bits.sign[1] <= io.in.hor[1].bits.sign[1] @[HBFP_GEMM.scala 130:33]
    myinputQ_hor_1.io.enq.bits.sign[2] <= io.in.hor[1].bits.sign[2] @[HBFP_GEMM.scala 130:33]
    myinputQ_hor_1.io.enq.bits.sign[3] <= io.in.hor[1].bits.sign[3] @[HBFP_GEMM.scala 130:33]
    myinputQ_ver_1.io.enq.valid <= UInt<1>("h1") @[HBFP_GEMM.scala 132:34]
    myinputQ_ver_1.io.enq.bits.exp <= io.in.ver[1].bits.exp @[HBFP_GEMM.scala 133:33]
    myinputQ_ver_1.io.enq.bits.man[0] <= io.in.ver[1].bits.man[0] @[HBFP_GEMM.scala 133:33]
    myinputQ_ver_1.io.enq.bits.man[1] <= io.in.ver[1].bits.man[1] @[HBFP_GEMM.scala 133:33]
    myinputQ_ver_1.io.enq.bits.man[2] <= io.in.ver[1].bits.man[2] @[HBFP_GEMM.scala 133:33]
    myinputQ_ver_1.io.enq.bits.man[3] <= io.in.ver[1].bits.man[3] @[HBFP_GEMM.scala 133:33]
    myinputQ_ver_1.io.enq.bits.sign[0] <= io.in.ver[1].bits.sign[0] @[HBFP_GEMM.scala 133:33]
    myinputQ_ver_1.io.enq.bits.sign[1] <= io.in.ver[1].bits.sign[1] @[HBFP_GEMM.scala 133:33]
    myinputQ_ver_1.io.enq.bits.sign[2] <= io.in.ver[1].bits.sign[2] @[HBFP_GEMM.scala 133:33]
    myinputQ_ver_1.io.enq.bits.sign[3] <= io.in.ver[1].bits.sign[3] @[HBFP_GEMM.scala 133:33]
    myinputQ_hor_0.io.deq.ready <= myinputQ_hor_0.io.deq.valid @[HBFP_GEMM.scala 138:34]
    myinputQ_ver_0.io.deq.ready <= myinputQ_ver_0.io.deq.valid @[HBFP_GEMM.scala 139:34]
    node _pes_0_0_io_in_hor_T = and(myinputQ_hor_0.io.deq.ready, myinputQ_hor_0.io.deq.valid) @[Decoupled.scala 51:35]
    wire _pes_0_0_io_in_hor_WIRE : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>} @[HBFP_GEMM.scala 140:102]
    _pes_0_0_io_in_hor_WIRE.exp <= UInt<8>("h0") @[HBFP_GEMM.scala 140:102]
    _pes_0_0_io_in_hor_WIRE.man[0] <= UInt<6>("h0") @[HBFP_GEMM.scala 140:102]
    _pes_0_0_io_in_hor_WIRE.man[1] <= UInt<6>("h0") @[HBFP_GEMM.scala 140:102]
    _pes_0_0_io_in_hor_WIRE.man[2] <= UInt<6>("h0") @[HBFP_GEMM.scala 140:102]
    _pes_0_0_io_in_hor_WIRE.man[3] <= UInt<6>("h0") @[HBFP_GEMM.scala 140:102]
    _pes_0_0_io_in_hor_WIRE.sign[0] <= UInt<1>("h0") @[HBFP_GEMM.scala 140:102]
    _pes_0_0_io_in_hor_WIRE.sign[1] <= UInt<1>("h0") @[HBFP_GEMM.scala 140:102]
    _pes_0_0_io_in_hor_WIRE.sign[2] <= UInt<1>("h0") @[HBFP_GEMM.scala 140:102]
    _pes_0_0_io_in_hor_WIRE.sign[3] <= UInt<1>("h0") @[HBFP_GEMM.scala 140:102]
    node _pes_0_0_io_in_hor_T_1 = mux(_pes_0_0_io_in_hor_T, myinputQ_hor_0.io.deq.bits, _pes_0_0_io_in_hor_WIRE) @[HBFP_GEMM.scala 140:31]
    pes_0_0.io.in.hor.exp <= _pes_0_0_io_in_hor_T_1.exp @[HBFP_GEMM.scala 140:25]
    pes_0_0.io.in.hor.man[0] <= _pes_0_0_io_in_hor_T_1.man[0] @[HBFP_GEMM.scala 140:25]
    pes_0_0.io.in.hor.man[1] <= _pes_0_0_io_in_hor_T_1.man[1] @[HBFP_GEMM.scala 140:25]
    pes_0_0.io.in.hor.man[2] <= _pes_0_0_io_in_hor_T_1.man[2] @[HBFP_GEMM.scala 140:25]
    pes_0_0.io.in.hor.man[3] <= _pes_0_0_io_in_hor_T_1.man[3] @[HBFP_GEMM.scala 140:25]
    pes_0_0.io.in.hor.sign[0] <= _pes_0_0_io_in_hor_T_1.sign[0] @[HBFP_GEMM.scala 140:25]
    pes_0_0.io.in.hor.sign[1] <= _pes_0_0_io_in_hor_T_1.sign[1] @[HBFP_GEMM.scala 140:25]
    pes_0_0.io.in.hor.sign[2] <= _pes_0_0_io_in_hor_T_1.sign[2] @[HBFP_GEMM.scala 140:25]
    pes_0_0.io.in.hor.sign[3] <= _pes_0_0_io_in_hor_T_1.sign[3] @[HBFP_GEMM.scala 140:25]
    node _pes_0_0_io_in_ver_T = and(myinputQ_ver_0.io.deq.ready, myinputQ_ver_0.io.deq.valid) @[Decoupled.scala 51:35]
    wire _pes_0_0_io_in_ver_WIRE : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>} @[HBFP_GEMM.scala 141:102]
    _pes_0_0_io_in_ver_WIRE.exp <= UInt<8>("h0") @[HBFP_GEMM.scala 141:102]
    _pes_0_0_io_in_ver_WIRE.man[0] <= UInt<6>("h0") @[HBFP_GEMM.scala 141:102]
    _pes_0_0_io_in_ver_WIRE.man[1] <= UInt<6>("h0") @[HBFP_GEMM.scala 141:102]
    _pes_0_0_io_in_ver_WIRE.man[2] <= UInt<6>("h0") @[HBFP_GEMM.scala 141:102]
    _pes_0_0_io_in_ver_WIRE.man[3] <= UInt<6>("h0") @[HBFP_GEMM.scala 141:102]
    _pes_0_0_io_in_ver_WIRE.sign[0] <= UInt<1>("h0") @[HBFP_GEMM.scala 141:102]
    _pes_0_0_io_in_ver_WIRE.sign[1] <= UInt<1>("h0") @[HBFP_GEMM.scala 141:102]
    _pes_0_0_io_in_ver_WIRE.sign[2] <= UInt<1>("h0") @[HBFP_GEMM.scala 141:102]
    _pes_0_0_io_in_ver_WIRE.sign[3] <= UInt<1>("h0") @[HBFP_GEMM.scala 141:102]
    node _pes_0_0_io_in_ver_T_1 = mux(_pes_0_0_io_in_ver_T, myinputQ_ver_0.io.deq.bits, _pes_0_0_io_in_ver_WIRE) @[HBFP_GEMM.scala 141:31]
    pes_0_0.io.in.ver.exp <= _pes_0_0_io_in_ver_T_1.exp @[HBFP_GEMM.scala 141:25]
    pes_0_0.io.in.ver.man[0] <= _pes_0_0_io_in_ver_T_1.man[0] @[HBFP_GEMM.scala 141:25]
    pes_0_0.io.in.ver.man[1] <= _pes_0_0_io_in_ver_T_1.man[1] @[HBFP_GEMM.scala 141:25]
    pes_0_0.io.in.ver.man[2] <= _pes_0_0_io_in_ver_T_1.man[2] @[HBFP_GEMM.scala 141:25]
    pes_0_0.io.in.ver.man[3] <= _pes_0_0_io_in_ver_T_1.man[3] @[HBFP_GEMM.scala 141:25]
    pes_0_0.io.in.ver.sign[0] <= _pes_0_0_io_in_ver_T_1.sign[0] @[HBFP_GEMM.scala 141:25]
    pes_0_0.io.in.ver.sign[1] <= _pes_0_0_io_in_ver_T_1.sign[1] @[HBFP_GEMM.scala 141:25]
    pes_0_0.io.in.ver.sign[2] <= _pes_0_0_io_in_ver_T_1.sign[2] @[HBFP_GEMM.scala 141:25]
    pes_0_0.io.in.ver.sign[3] <= _pes_0_0_io_in_ver_T_1.sign[3] @[HBFP_GEMM.scala 141:25]
    reg myinputQ_hor_1_io_deq_ready_r : UInt<1>, clock with :
      reset => (UInt<1>("h0"), myinputQ_hor_1_io_deq_ready_r) @[Reg.scala 19:16]
    when UInt<1>("h1") : @[Reg.scala 20:18]
      myinputQ_hor_1_io_deq_ready_r <= myinputQ_hor_1.io.deq.valid @[Reg.scala 20:22]
    myinputQ_hor_1.io.deq.ready <= myinputQ_hor_1_io_deq_ready_r @[HBFP_GEMM.scala 138:34]
    reg myinputQ_ver_1_io_deq_ready_r : UInt<1>, clock with :
      reset => (UInt<1>("h0"), myinputQ_ver_1_io_deq_ready_r) @[Reg.scala 19:16]
    when UInt<1>("h1") : @[Reg.scala 20:18]
      myinputQ_ver_1_io_deq_ready_r <= myinputQ_ver_1.io.deq.valid @[Reg.scala 20:22]
    myinputQ_ver_1.io.deq.ready <= myinputQ_ver_1_io_deq_ready_r @[HBFP_GEMM.scala 139:34]
    node _pes_1_0_io_in_hor_T = and(myinputQ_hor_1.io.deq.ready, myinputQ_hor_1.io.deq.valid) @[Decoupled.scala 51:35]
    wire _pes_1_0_io_in_hor_WIRE : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>} @[HBFP_GEMM.scala 140:102]
    _pes_1_0_io_in_hor_WIRE.exp <= UInt<8>("h0") @[HBFP_GEMM.scala 140:102]
    _pes_1_0_io_in_hor_WIRE.man[0] <= UInt<6>("h0") @[HBFP_GEMM.scala 140:102]
    _pes_1_0_io_in_hor_WIRE.man[1] <= UInt<6>("h0") @[HBFP_GEMM.scala 140:102]
    _pes_1_0_io_in_hor_WIRE.man[2] <= UInt<6>("h0") @[HBFP_GEMM.scala 140:102]
    _pes_1_0_io_in_hor_WIRE.man[3] <= UInt<6>("h0") @[HBFP_GEMM.scala 140:102]
    _pes_1_0_io_in_hor_WIRE.sign[0] <= UInt<1>("h0") @[HBFP_GEMM.scala 140:102]
    _pes_1_0_io_in_hor_WIRE.sign[1] <= UInt<1>("h0") @[HBFP_GEMM.scala 140:102]
    _pes_1_0_io_in_hor_WIRE.sign[2] <= UInt<1>("h0") @[HBFP_GEMM.scala 140:102]
    _pes_1_0_io_in_hor_WIRE.sign[3] <= UInt<1>("h0") @[HBFP_GEMM.scala 140:102]
    node _pes_1_0_io_in_hor_T_1 = mux(_pes_1_0_io_in_hor_T, myinputQ_hor_1.io.deq.bits, _pes_1_0_io_in_hor_WIRE) @[HBFP_GEMM.scala 140:31]
    pes_1_0.io.in.hor.exp <= _pes_1_0_io_in_hor_T_1.exp @[HBFP_GEMM.scala 140:25]
    pes_1_0.io.in.hor.man[0] <= _pes_1_0_io_in_hor_T_1.man[0] @[HBFP_GEMM.scala 140:25]
    pes_1_0.io.in.hor.man[1] <= _pes_1_0_io_in_hor_T_1.man[1] @[HBFP_GEMM.scala 140:25]
    pes_1_0.io.in.hor.man[2] <= _pes_1_0_io_in_hor_T_1.man[2] @[HBFP_GEMM.scala 140:25]
    pes_1_0.io.in.hor.man[3] <= _pes_1_0_io_in_hor_T_1.man[3] @[HBFP_GEMM.scala 140:25]
    pes_1_0.io.in.hor.sign[0] <= _pes_1_0_io_in_hor_T_1.sign[0] @[HBFP_GEMM.scala 140:25]
    pes_1_0.io.in.hor.sign[1] <= _pes_1_0_io_in_hor_T_1.sign[1] @[HBFP_GEMM.scala 140:25]
    pes_1_0.io.in.hor.sign[2] <= _pes_1_0_io_in_hor_T_1.sign[2] @[HBFP_GEMM.scala 140:25]
    pes_1_0.io.in.hor.sign[3] <= _pes_1_0_io_in_hor_T_1.sign[3] @[HBFP_GEMM.scala 140:25]
    node _pes_0_1_io_in_ver_T = and(myinputQ_ver_1.io.deq.ready, myinputQ_ver_1.io.deq.valid) @[Decoupled.scala 51:35]
    wire _pes_0_1_io_in_ver_WIRE : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>} @[HBFP_GEMM.scala 141:102]
    _pes_0_1_io_in_ver_WIRE.exp <= UInt<8>("h0") @[HBFP_GEMM.scala 141:102]
    _pes_0_1_io_in_ver_WIRE.man[0] <= UInt<6>("h0") @[HBFP_GEMM.scala 141:102]
    _pes_0_1_io_in_ver_WIRE.man[1] <= UInt<6>("h0") @[HBFP_GEMM.scala 141:102]
    _pes_0_1_io_in_ver_WIRE.man[2] <= UInt<6>("h0") @[HBFP_GEMM.scala 141:102]
    _pes_0_1_io_in_ver_WIRE.man[3] <= UInt<6>("h0") @[HBFP_GEMM.scala 141:102]
    _pes_0_1_io_in_ver_WIRE.sign[0] <= UInt<1>("h0") @[HBFP_GEMM.scala 141:102]
    _pes_0_1_io_in_ver_WIRE.sign[1] <= UInt<1>("h0") @[HBFP_GEMM.scala 141:102]
    _pes_0_1_io_in_ver_WIRE.sign[2] <= UInt<1>("h0") @[HBFP_GEMM.scala 141:102]
    _pes_0_1_io_in_ver_WIRE.sign[3] <= UInt<1>("h0") @[HBFP_GEMM.scala 141:102]
    node _pes_0_1_io_in_ver_T_1 = mux(_pes_0_1_io_in_ver_T, myinputQ_ver_1.io.deq.bits, _pes_0_1_io_in_ver_WIRE) @[HBFP_GEMM.scala 141:31]
    pes_0_1.io.in.ver.exp <= _pes_0_1_io_in_ver_T_1.exp @[HBFP_GEMM.scala 141:25]
    pes_0_1.io.in.ver.man[0] <= _pes_0_1_io_in_ver_T_1.man[0] @[HBFP_GEMM.scala 141:25]
    pes_0_1.io.in.ver.man[1] <= _pes_0_1_io_in_ver_T_1.man[1] @[HBFP_GEMM.scala 141:25]
    pes_0_1.io.in.ver.man[2] <= _pes_0_1_io_in_ver_T_1.man[2] @[HBFP_GEMM.scala 141:25]
    pes_0_1.io.in.ver.man[3] <= _pes_0_1_io_in_ver_T_1.man[3] @[HBFP_GEMM.scala 141:25]
    pes_0_1.io.in.ver.sign[0] <= _pes_0_1_io_in_ver_T_1.sign[0] @[HBFP_GEMM.scala 141:25]
    pes_0_1.io.in.ver.sign[1] <= _pes_0_1_io_in_ver_T_1.sign[1] @[HBFP_GEMM.scala 141:25]
    pes_0_1.io.in.ver.sign[2] <= _pes_0_1_io_in_ver_T_1.sign[2] @[HBFP_GEMM.scala 141:25]
    pes_0_1.io.in.ver.sign[3] <= _pes_0_1_io_in_ver_T_1.sign[3] @[HBFP_GEMM.scala 141:25]
    reg pes_0_1_io_in_hor_r : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}, clock with :
      reset => (UInt<1>("h0"), pes_0_1_io_in_hor_r) @[Reg.scala 19:16]
    when UInt<1>("h1") : @[Reg.scala 20:18]
      pes_0_1_io_in_hor_r <= pes_0_0.io.out.hor @[Reg.scala 20:22]
    pes_0_1.io.in.hor.exp <= pes_0_1_io_in_hor_r.exp @[HBFP_GEMM.scala 148:27]
    pes_0_1.io.in.hor.man[0] <= pes_0_1_io_in_hor_r.man[0] @[HBFP_GEMM.scala 148:27]
    pes_0_1.io.in.hor.man[1] <= pes_0_1_io_in_hor_r.man[1] @[HBFP_GEMM.scala 148:27]
    pes_0_1.io.in.hor.man[2] <= pes_0_1_io_in_hor_r.man[2] @[HBFP_GEMM.scala 148:27]
    pes_0_1.io.in.hor.man[3] <= pes_0_1_io_in_hor_r.man[3] @[HBFP_GEMM.scala 148:27]
    pes_0_1.io.in.hor.sign[0] <= pes_0_1_io_in_hor_r.sign[0] @[HBFP_GEMM.scala 148:27]
    pes_0_1.io.in.hor.sign[1] <= pes_0_1_io_in_hor_r.sign[1] @[HBFP_GEMM.scala 148:27]
    pes_0_1.io.in.hor.sign[2] <= pes_0_1_io_in_hor_r.sign[2] @[HBFP_GEMM.scala 148:27]
    pes_0_1.io.in.hor.sign[3] <= pes_0_1_io_in_hor_r.sign[3] @[HBFP_GEMM.scala 148:27]
    reg pes_1_1_io_in_hor_r : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}, clock with :
      reset => (UInt<1>("h0"), pes_1_1_io_in_hor_r) @[Reg.scala 19:16]
    when UInt<1>("h1") : @[Reg.scala 20:18]
      pes_1_1_io_in_hor_r <= pes_1_0.io.out.hor @[Reg.scala 20:22]
    pes_1_1.io.in.hor.exp <= pes_1_1_io_in_hor_r.exp @[HBFP_GEMM.scala 148:27]
    pes_1_1.io.in.hor.man[0] <= pes_1_1_io_in_hor_r.man[0] @[HBFP_GEMM.scala 148:27]
    pes_1_1.io.in.hor.man[1] <= pes_1_1_io_in_hor_r.man[1] @[HBFP_GEMM.scala 148:27]
    pes_1_1.io.in.hor.man[2] <= pes_1_1_io_in_hor_r.man[2] @[HBFP_GEMM.scala 148:27]
    pes_1_1.io.in.hor.man[3] <= pes_1_1_io_in_hor_r.man[3] @[HBFP_GEMM.scala 148:27]
    pes_1_1.io.in.hor.sign[0] <= pes_1_1_io_in_hor_r.sign[0] @[HBFP_GEMM.scala 148:27]
    pes_1_1.io.in.hor.sign[1] <= pes_1_1_io_in_hor_r.sign[1] @[HBFP_GEMM.scala 148:27]
    pes_1_1.io.in.hor.sign[2] <= pes_1_1_io_in_hor_r.sign[2] @[HBFP_GEMM.scala 148:27]
    pes_1_1.io.in.hor.sign[3] <= pes_1_1_io_in_hor_r.sign[3] @[HBFP_GEMM.scala 148:27]
    reg pes_1_0_io_in_ver_r : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}, clock with :
      reset => (UInt<1>("h0"), pes_1_0_io_in_ver_r) @[Reg.scala 19:16]
    when UInt<1>("h1") : @[Reg.scala 20:18]
      pes_1_0_io_in_ver_r <= pes_0_0.io.out.ver @[Reg.scala 20:22]
    pes_1_0.io.in.ver.exp <= pes_1_0_io_in_ver_r.exp @[HBFP_GEMM.scala 155:27]
    pes_1_0.io.in.ver.man[0] <= pes_1_0_io_in_ver_r.man[0] @[HBFP_GEMM.scala 155:27]
    pes_1_0.io.in.ver.man[1] <= pes_1_0_io_in_ver_r.man[1] @[HBFP_GEMM.scala 155:27]
    pes_1_0.io.in.ver.man[2] <= pes_1_0_io_in_ver_r.man[2] @[HBFP_GEMM.scala 155:27]
    pes_1_0.io.in.ver.man[3] <= pes_1_0_io_in_ver_r.man[3] @[HBFP_GEMM.scala 155:27]
    pes_1_0.io.in.ver.sign[0] <= pes_1_0_io_in_ver_r.sign[0] @[HBFP_GEMM.scala 155:27]
    pes_1_0.io.in.ver.sign[1] <= pes_1_0_io_in_ver_r.sign[1] @[HBFP_GEMM.scala 155:27]
    pes_1_0.io.in.ver.sign[2] <= pes_1_0_io_in_ver_r.sign[2] @[HBFP_GEMM.scala 155:27]
    pes_1_0.io.in.ver.sign[3] <= pes_1_0_io_in_ver_r.sign[3] @[HBFP_GEMM.scala 155:27]
    reg pes_1_1_io_in_ver_r : { sign : UInt<1>[4], man : UInt<6>[4], exp : UInt<8>}, clock with :
      reset => (UInt<1>("h0"), pes_1_1_io_in_ver_r) @[Reg.scala 19:16]
    when UInt<1>("h1") : @[Reg.scala 20:18]
      pes_1_1_io_in_ver_r <= pes_0_1.io.out.ver @[Reg.scala 20:22]
    pes_1_1.io.in.ver.exp <= pes_1_1_io_in_ver_r.exp @[HBFP_GEMM.scala 155:27]
    pes_1_1.io.in.ver.man[0] <= pes_1_1_io_in_ver_r.man[0] @[HBFP_GEMM.scala 155:27]
    pes_1_1.io.in.ver.man[1] <= pes_1_1_io_in_ver_r.man[1] @[HBFP_GEMM.scala 155:27]
    pes_1_1.io.in.ver.man[2] <= pes_1_1_io_in_ver_r.man[2] @[HBFP_GEMM.scala 155:27]
    pes_1_1.io.in.ver.man[3] <= pes_1_1_io_in_ver_r.man[3] @[HBFP_GEMM.scala 155:27]
    pes_1_1.io.in.ver.sign[0] <= pes_1_1_io_in_ver_r.sign[0] @[HBFP_GEMM.scala 155:27]
    pes_1_1.io.in.ver.sign[1] <= pes_1_1_io_in_ver_r.sign[1] @[HBFP_GEMM.scala 155:27]
    pes_1_1.io.in.ver.sign[2] <= pes_1_1_io_in_ver_r.sign[2] @[HBFP_GEMM.scala 155:27]
    pes_1_1.io.in.ver.sign[3] <= pes_1_1_io_in_ver_r.sign[3] @[HBFP_GEMM.scala 155:27]
    io.out[0][0].result <= pes_0_0.io.out.result @[HBFP_GEMM.scala 161:27]
    io.out[0][1].result <= pes_0_1.io.out.result @[HBFP_GEMM.scala 161:27]
    io.out[1][0].result <= pes_1_0.io.out.result @[HBFP_GEMM.scala 161:27]
    io.out[1][1].result <= pes_1_1.io.out.result @[HBFP_GEMM.scala 161:27]

